""" Code is generated by ucloud-model, DO NOT EDIT IT. """


import pytest

from ucloud.core import exc
from ucloud.testing import funcs, op, env, utest
from ucloud.testing.driver import spec


scenario = spec.scenario(5292, "UCloudStack_05", owners=["lisa.wang@ucloud.cn"])


@pytest.mark.skipif(env.is_ut(), reason=env.get_skip_reason())
def test_scenario_5292(ustack_client, variables):
    scenario.store.update(variables)

    scenario.store["Region"] = "cn"
    scenario.store["Zone"] = "zone-01"
    scenario.store["BeginTime"] = funcs.get_timestamp(10,) - 3600
    scenario.store["EndTime"] = funcs.get_timestamp(10,)

    # 查询VPC信息
    describe_vpc_00(ustack_client)

    # 查询安全组信息
    describe_security_group_01(ustack_client)

    # 查询主机机型
    describe_vm_type_02(ustack_client)

    # 查询存储类型
    describe_storage_type_03(ustack_client)

    # 获取镜像信息，包括默认镜像和自制镜像。
    describe_image_04(ustack_client)

    # 创建虚拟机
    create_vm_instance_05(ustack_client)

    # 创建虚拟机
    create_vm_instance_06(ustack_client)

    # 查询虚拟机
    describe_vm_instance_07(ustack_client)

    # 查询虚拟机
    describe_vm_instance_08(ustack_client)

    # 创建证书
    create_certificate_09(ustack_client)

    # 创建证书
    create_certificate_10(ustack_client)

    # 查询证书
    describe_certificate_11(ustack_client)

    # 查询证书
    describe_certificate_12(ustack_client)

    # 创建负载均衡
    create_lb_13(ustack_client)

    # 获取负载均衡信息
    describe_lb_14(ustack_client)

    # 创建负载均衡VServer
    create_vs_15(ustack_client)

    # 添加服务节点
    create_rs_16(ustack_client)

    # 获取服务节点信息
    describe_rs_17(ustack_client)

    # 修改负载均衡VServer
    update_vs_18(ustack_client)

    # 移除服务节点
    delete_rs_19(ustack_client)

    # 删除VServer
    delete_vs_20(ustack_client)

    # 查询操作日志
    describe_op_logs_21(ustack_client)

    # 删除负载均衡
    delete_lb_22(ustack_client)

    # 删除证书
    delete_certificate_23(ustack_client)

    # 删除证书
    delete_certificate_24(ustack_client)

    # 断电虚拟机
    poweroff_vm_instance_25(ustack_client)

    # 断电虚拟机
    poweroff_vm_instance_26(ustack_client)

    # 删除虚拟机
    delete_vm_instance_27(ustack_client)

    # 删除虚拟机
    delete_vm_instance_28(ustack_client)


@scenario.api(
    title="查询VPC信息",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeVPCResponse"),
    ],
    action="DescribeVPC",
)
def describe_vpc_00(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().describe_vpc(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["VPCID"] = utest.value_at_path(resp, "Infos.0.VPCID")
    variables["SubnetID"] = utest.value_at_path(
        resp, "Infos.0.SubnetInfos.0.SubnetID"
    )
    return resp


@scenario.api(
    title="查询安全组信息",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeSecurityGroupResponse"),
    ],
    action="DescribeSecurityGroup",
)
def describe_security_group_01(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().describe_security_group(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["SGID"] = utest.value_at_path(resp, "Infos.0.SGID")
    return resp


@scenario.api(
    title="查询主机机型",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeVMTypeResponse"),
    ],
    action="DescribeVMType",
)
def describe_vm_type_02(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().describe_vm_type(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["VMType"] = utest.value_at_path(resp, "Infos.0.VMType")
    return resp


@scenario.api(
    title="查询存储类型",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeStorageTypeResponse"),
    ],
    action="DescribeStorageType",
)
def describe_storage_type_03(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().describe_storage_type(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["StorageType"] = utest.value_at_path(resp, "Infos.0.StorageType")
    return resp


@scenario.api(
    title="获取镜像信息，包括默认镜像和自制镜像。",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeImageResponse"),
    ],
    action="DescribeImage",
)
def describe_image_04(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().describe_image(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["Image_id"] = utest.value_at_path(resp, "Infos.0.ImageID")
    return resp


@scenario.api(
    title="创建虚拟机",
    max_retries=3,
    retry_interval=1,
    startup_delay=10,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "CreateVMInstanceResponse"),
    ],
    action="CreateVMInstance",
)
def create_vm_instance_05(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "WANSGID": variables.get("SGID"),
        "VPCID": variables.get("VPCID"),
        "VMType": "ComputeSetBBBB",
        "SubnetID": variables.get("SubnetID"),
        "Region": variables.get("Region"),
        "Password": "Zhongshang_2018",
        "Name": "host_test",
        "Memory": 2048,
        "ImageID": "cn-image-centos-65",
        "DataDiskSetType": "StorageSetBBBB",
        "ChargeType": "Month",
        "CPU": 1,
        "BootDiskSetType": "StorageSetBBBB",
    }

    try:
        resp = client.ucloudstack().create_vm_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["VMID"] = utest.value_at_path(resp, "VMID")
    return resp


@scenario.api(
    title="创建虚拟机",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "CreateVMInstanceResponse"),
    ],
    action="CreateVMInstance",
)
def create_vm_instance_06(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "WANSGID": variables.get("SGID"),
        "VPCID": variables.get("VPCID"),
        "VMType": "ComputeSetBBBB",
        "SubnetID": variables.get("SubnetID"),
        "Region": variables.get("Region"),
        "Password": "Zhongshang_2018",
        "Name": "host_test",
        "Memory": 2048,
        "ImageID": "cn-image-centos-65",
        "DataDiskSetType": "StorageSetBBBB",
        "ChargeType": "Month",
        "CPU": 1,
        "BootDiskSetType": "StorageSetBBBB",
    }

    try:
        resp = client.ucloudstack().create_vm_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["EIPID"] = utest.value_at_path(resp, "EIPID")
    variables["DiskID"] = utest.value_at_path(resp, "DiskID")
    variables["VMID_1"] = utest.value_at_path(resp, "VMID")
    return resp


@scenario.api(
    title="查询虚拟机",
    max_retries=3,
    retry_interval=1,
    startup_delay=90,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeVMInstanceResponse"),
        ("str_eq", "Infos.0.State", "Running"),
    ],
    action="DescribeVMInstance",
)
def describe_vm_instance_07(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VMIDs": [variables.get("VMID"),],
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().describe_vm_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="查询虚拟机",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeVMInstanceResponse"),
        ("str_eq", "Infos.0.State", "Running"),
    ],
    action="DescribeVMInstance",
)
def describe_vm_instance_08(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VMIDs": [variables.get("VMID_1"),],
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().describe_vm_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="创建证书",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "CreateCertificateResponse"),
    ],
    action="CreateCertificate",
)
def create_certificate_09(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "PrivateKey": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEA8QbLsBnQmXRFLONEkHL1LfvYZZi04HH5Kv4fX9UFT8S6vzwv\njrBu+oToMujfH+5O8eV4LTyovTuMnRZfFYmIRF0Y2EHFK05t5bu7PVE9gCFJitHS\nPj2YBVOYA8IfH0C6C9uE9pT35A/U54Apw2p36N8W8f3vYbCZH+4SlosfM68bWGAl\nE7feqU6UHlo6+4IJdmwxH02siTTPoucaBgT4kBXcT5ylgozZl4tncLNHdsIYtXrk\nVoCOcCF44uVin1H+hL8xtFM8+ovL7Eixr/KS+wtALlCODKzzQ3rBXgNixGHJUJKR\nxBOPQZKULwqJAlvXfP6+QElK8vu0qySJ3FOhcQIDAQABAoIBAAPvZnfzk/JNcauv\n8jihh9s+V2QhQCLB+Z14FK8N3U5WGe5xXx1nSAiTDu912d69l1BfvLyQVvjv9fXC\nnb7ORglHs9YkDMIOP8EWdZIkt2pWIMtBbbtSah78JGk7TCLIfcEfzmXwPLPehk1Z\nTFVCcb69lbRRvwzLQ1TAIFGQ5+uCEkW02KAl6kx+JnVpsE8/BjqZKG1Ne+sM6dOC\nGRd44hgiNHKUT3Xtbw6jttiUFDLKYMYtb7PpRAkZFM8tgnBV6dWWJ3xTYW9kOjPh\nXnScNARfphUZVibRhA04og5p1q/MUz9Sz9g2DURuSlo/MP3WZMbVRvZiUN1xhz5v\n2WhsddkCgYEA+gWPFo0TbVbZXUrx9J/ptI9NXNx5zjyUrv87MDt1pnmMDgWrsCEI\nRqQR4Lp2G11GA7IudiA/ipcZqgcRIIFvb+gu1kObox3BGGs59x+DqFeAPXt6dFG2\nW10f9k96/tcbdursurqwd3Zv3cqQqRTKgaP4xHFmexlcwGCF5YwewWMCgYEA9sos\n2acNINXwcNRUPnpg82DOrG9Zjr1aiNo9PDJmwGEdC9QMOUWM85dq0M9g388ttiLU\nWr/U4r5yDuqWJPcKtff2BaxSsZpcQ4Id9eddD9L+sxaBGyD23RtOC+IOlkG6WS4g\niUYulQvW69tBHWiwxQu7YMSIE2B3EuySPOQYlBsCgYEAxNwvqB/4lfT2PUDPdj+b\ncnILBf0LY1nL8GZCol2O6z91CW1pm8rGi2iQMxRd/nnYsPxRHO2TWnpS2M+rqp5/\nsettRYQCPdMlwSZcg7oqnhgXf1GEP6Y/IX0Xt4cpXxLcKywarYRlggqdVlMyyA74\nzE7hhzuK5442u7rEctN7O+UCgYAoM78ipafp1XAZsT0YAG+Stg504J7CNe5tpL+c\n8sjyRd+pcZ2cJsxTUjNAWMf7LZDQvtPBBMb1OPjznRtgYi4IfqBBRFUkQXUOOkAP\nMuViEokTO3NErBYK5svL+8NMjuCAbpc2RYyJEyiru0fcNpW1Q7f+h4VzQp+jIY6h\nBLdMSQKBgGauU7OQksZCEY2MVAcD5dShYYvWLxOkj4dVVwISN1M6ImCAHwXZ6Nak\n6YlzCGT+NbRJbB2cPfsrKXtAJVX15I3iDCKAoGkb+9kiHnPj7Q71KVuWQE6BQx7E\nvE88TSsshwtX1s+qU9UWUrMPodK32q5nO3p8N033NvS9wLNfbcdc\n-----END RSA PRIVATE KEY-----",
        "Name": "server",
        "CertificateType": "ServerCrt",
        "Certificate": "-----BEGIN CERTIFICATE-----\nMIIFzTCCBLWgAwIBAgIQQ8IswmAhEIKfNhrKqb0F3DANBgkqhkiG9w0BAQsFADCB\nlzELMAkGA1UEBhMCQ04xJTAjBgNVBAoTHFRydXN0QXNpYSBUZWNobm9sb2dpZXMs\nIEluYy4xHzAdBgNVBAsTFlN5bWFudGVjIFRydXN0IE5ldHdvcmsxHTAbBgNVBAsT\nFERvbWFpbiBWYWxpZGF0ZWQgU1NMMSEwHwYDVQQDExhUcnVzdEFzaWEgRFYgU1NM\nIENBIC0gRzUwHhcNMTYxMjA2MDAwMDAwWhcNMTcxMjA2MjM1OTU5WjAgMR4wHAYD\nVQQDDBVtLmVjb2xvZ3ktZW1vYmlsZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IB\nDwAwggEKAoIBAQDxBsuwGdCZdEUs40SQcvUt+9hlmLTgcfkq/h9f1QVPxLq/PC+O\nsG76hOgy6N8f7k7x5XgtPKi9O4ydFl8ViYhEXRjYQcUrTm3lu7s9UT2AIUmK0dI+\nPZgFU5gDwh8fQLoL24T2lPfkD9TngCnDanfo3xbx/e9hsJkf7hKWix8zrxtYYCUT\nt96pTpQeWjr7ggl2bDEfTayJNM+i5xoGBPiQFdxPnKWCjNmXi2dws0d2whi1euRW\ngI5wIXji5WKfUf6EvzG0Uzz6i8vsSLGv8pL7C0AuUI4MrPNDesFeA2LEYclQkpHE\nE49BkpQvCokCW9d8/r5ASUry+7SrJIncU6FxAgMBAAGjggKJMIIChTAgBgNVHREE\nGTAXghVtLmVjb2xvZ3ktZW1vYmlsZS5jb20wCQYDVR0TBAIwADBhBgNVHSAEWjBY\nMFYGBmeBDAECATBMMCMGCCsGAQUFBwIBFhdodHRwczovL2Quc3ltY2IuY29tL2Nw\nczAlBggrBgEFBQcCAjAZDBdodHRwczovL2Quc3ltY2IuY29tL3JwYTAfBgNVHSME\nGDAWgBRtWMd/GufhPy6mjJc1Qrv00zisPzAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0l\nBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMIGbBggrBgEFBQcBAQSBjjCBizA8Bggr\nBgEFBQcwAYYwaHR0cDovL3RydXN0YXNpYTItb2NzcC5kaWdpdGFsY2VydHZhbGlk\nYXRpb24uY29tMEsGCCsGAQUFBzAChj9odHRwOi8vdHJ1c3Rhc2lhMi1haWEuZGln\naXRhbGNlcnR2YWxpZGF0aW9uLmNvbS90cnVzdGFzaWFnNS5jcnQwggEDBgorBgEE\nAdZ5AgQCBIH0BIHxAO8AdQDd6x0reg1PpiCLga2BaHB+Lo6dAdVciI09EcTNtuy+\nzAAAAVjT7zdSAAAEAwBGMEQCIDCzWufc1q7hjmrrCetGyoA8EsEqpRSIhmZXStX5\n8b7zAiA6x5aAaDK+yMyeAgw71yi3tRVrWayHN+W0+4BxC8u5UQB2AO5Lvbd1zmC6\n4UJpH6vhnmajD35fsHLYgwDEe4l6qP3LAAABWNPvN4kAAAQDAEcwRQIgZ/LNgg7n\n7AE4O2yZkrXNcqAOmJ3NU2nT6zcnBxPFTTsCIQCjyPbMfWMZTD3kxgxPQ1COw5zJ\nsM0dfNmSr3MiU7EhqDANBgkqhkiG9w0BAQsFAAOCAQEAeyfgUhg9ZWVCaz0f+BQU\n6fMMfmQ1BDzvVFu+ORoAqyJQogxwIdfjrlz/63YFee5qpUsW/aaz4ma3bb4dpE1K\nGsgYe5N3o0xybYlOj+KB61sufYkzQS3HgDevCwjfUlGEbNl4dpO2xh5s5AANXlnz\ns/X0+AJ33/bm+fWIjAbIjluaEoM6GETHTXi4Tlxy0j3nsXsB9tIIUibAdTtButef\nJJRnikGRN+eHjrsLYe0RUmdKOQz1ik6teHt0MQX0aCe8OlXeyGDd9m8u7+y0nAnH\nTVaNuT7vXMWyyXLVUcV898wkBo3Bo3hUiaw0QR0ttgDrf5ZwqPfqpytRW2K5GMZT\nuw==\n-----END CERTIFICATE-----\n\n\n-----BEGIN CERTIFICATE-----\nMIIFZTCCBE2gAwIBAgIQOhAOfxCeGsWcxf/2QNXkQjANBgkqhkiG9w0BAQsFADCB\nyjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL\nExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp\nU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW\nZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0\naG9yaXR5IC0gRzUwHhcNMTYwODExMDAwMDAwWhcNMjYwODEwMjM1OTU5WjCBlzEL\nMAkGA1UEBhMCQ04xJTAjBgNVBAoTHFRydXN0QXNpYSBUZWNobm9sb2dpZXMsIElu\nYy4xHzAdBgNVBAsTFlN5bWFudGVjIFRydXN0IE5ldHdvcmsxHTAbBgNVBAsTFERv\nbWFpbiBWYWxpZGF0ZWQgU1NMMSEwHwYDVQQDExhUcnVzdEFzaWEgRFYgU1NMIENB\nIC0gRzUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC39aSJZG/97x3a\n6Qmuc9+MubagegRAVUmFYHTYTs8IKB2pM7wXN7W8mekdZaEgUjDFxvRBK/DhTb7U\n8ONLsKKdT86aOhzbz2noCTn9wPWnGwkg+/4YKg/dPQQdV9tMsSu0cwqInWHxSAkm\nAI1hYFC9D7Sf7Hp/5cRcD+dK454YMRzNOGLQnCVI8JEqrz6o9SOvQNTqTcfqt6DC\n0UlXG+MPD1eNPjlzf1Vwaab+VSTgySoC+Ikbq2VsdykeOiGXW/OIiASH7+2LcR05\nPmQ7GEOlM8yzoVojFpM8sHz+WxI05ZOPri5+vX3HhHHjWr5432G0dVmgohnZvlVZ\noy8XrlbpAgMBAAGjggF2MIIBcjASBgNVHRMBAf8ECDAGAQH/AgEAMC8GA1UdHwQo\nMCYwJKAioCCGHmh0dHA6Ly9zLnN5bWNiLmNvbS9wY2EzLWc1LmNybDAOBgNVHQ8B\nAf8EBAMCAQYwLgYIKwYBBQUHAQEEIjAgMB4GCCsGAQUFBzABhhJodHRwOi8vcy5z\neW1jZC5jb20wYQYDVR0gBFowWDBWBgZngQwBAgEwTDAjBggrBgEFBQcCARYXaHR0\ncHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUHAgIwGRoXaHR0cHM6Ly9kLnN5\nbWNiLmNvbS9ycGEwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMCkGA1Ud\nEQQiMCCkHjAcMRowGAYDVQQDExFTeW1hbnRlY1BLSS0yLTYwMTAdBgNVHQ4EFgQU\nbVjHfxrn4T8upoyXNUK79NM4rD8wHwYDVR0jBBgwFoAUf9Nlp8Ld7LvwMAnzQzn6\nAq8zMTMwDQYJKoZIhvcNAQELBQADggEBABUphhBbeG7scE3EveIN0dOjXPgwgQi8\nI2ZAKYm6DawoGz1lEJVdvFmkyMbP973X80b7mKmn0nNbe1kjA4M0O0hHaMM1ZaEv\n7e9vHEAoGyysMO6HzPWYMkyNxcCV7Nos2Uv4RvLDpQHh7P4Kt6fUU13ipcynrtQD\n1lFUM0yoTzwwFsPu3Pk+94hL58ErqwqJQwxoHMgLIQeMVHeNKcWFy1bddSbIbCWU\nZs6cMxhrra062ZCpDCbxyEaFNGAtYQMqNz55Z/14XgSUONZ/cJTns6QKhpcgTOwB\nfnNzRnk+aWreP7osKhXlz4zs+llP7goBDKFOMMtoEXx3YjJCKgpqmBU=\n-----END CERTIFICATE-----",
    }

    try:
        resp = client.ucloudstack().create_certificate(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["CertificateID_server"] = utest.value_at_path(
        resp, "CertificateID"
    )
    return resp


@scenario.api(
    title="创建证书",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "CreateCertificateResponse"),
    ],
    action="CreateCertificate",
)
def create_certificate_10(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "Name": "ssl_client",
        "CertificateType": "CACrt",
        "Certificate": "-----BEGIN CERTIFICATE-----\nMIIFzTCCBLWgAwIBAgIQQ8IswmAhEIKfNhrKqb0F3DANBgkqhkiG9w0BAQsFADCB\nlzELMAkGA1UEBhMCQ04xJTAjBgNVBAoTHFRydXN0QXNpYSBUZWNobm9sb2dpZXMs\nIEluYy4xHzAdBgNVBAsTFlN5bWFudGVjIFRydXN0IE5ldHdvcmsxHTAbBgNVBAsT\nFERvbWFpbiBWYWxpZGF0ZWQgU1NMMSEwHwYDVQQDExhUcnVzdEFzaWEgRFYgU1NM\nIENBIC0gRzUwHhcNMTYxMjA2MDAwMDAwWhcNMTcxMjA2MjM1OTU5WjAgMR4wHAYD\nVQQDDBVtLmVjb2xvZ3ktZW1vYmlsZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IB\nDwAwggEKAoIBAQDxBsuwGdCZdEUs40SQcvUt+9hlmLTgcfkq/h9f1QVPxLq/PC+O\nsG76hOgy6N8f7k7x5XgtPKi9O4ydFl8ViYhEXRjYQcUrTm3lu7s9UT2AIUmK0dI+\nPZgFU5gDwh8fQLoL24T2lPfkD9TngCnDanfo3xbx/e9hsJkf7hKWix8zrxtYYCUT\nt96pTpQeWjr7ggl2bDEfTayJNM+i5xoGBPiQFdxPnKWCjNmXi2dws0d2whi1euRW\ngI5wIXji5WKfUf6EvzG0Uzz6i8vsSLGv8pL7C0AuUI4MrPNDesFeA2LEYclQkpHE\nE49BkpQvCokCW9d8/r5ASUry+7SrJIncU6FxAgMBAAGjggKJMIIChTAgBgNVHREE\nGTAXghVtLmVjb2xvZ3ktZW1vYmlsZS5jb20wCQYDVR0TBAIwADBhBgNVHSAEWjBY\nMFYGBmeBDAECATBMMCMGCCsGAQUFBwIBFhdodHRwczovL2Quc3ltY2IuY29tL2Nw\nczAlBggrBgEFBQcCAjAZDBdodHRwczovL2Quc3ltY2IuY29tL3JwYTAfBgNVHSME\nGDAWgBRtWMd/GufhPy6mjJc1Qrv00zisPzAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0l\nBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMIGbBggrBgEFBQcBAQSBjjCBizA8Bggr\nBgEFBQcwAYYwaHR0cDovL3RydXN0YXNpYTItb2NzcC5kaWdpdGFsY2VydHZhbGlk\nYXRpb24uY29tMEsGCCsGAQUFBzAChj9odHRwOi8vdHJ1c3Rhc2lhMi1haWEuZGln\naXRhbGNlcnR2YWxpZGF0aW9uLmNvbS90cnVzdGFzaWFnNS5jcnQwggEDBgorBgEE\nAdZ5AgQCBIH0BIHxAO8AdQDd6x0reg1PpiCLga2BaHB+Lo6dAdVciI09EcTNtuy+\nzAAAAVjT7zdSAAAEAwBGMEQCIDCzWufc1q7hjmrrCetGyoA8EsEqpRSIhmZXStX5\n8b7zAiA6x5aAaDK+yMyeAgw71yi3tRVrWayHN+W0+4BxC8u5UQB2AO5Lvbd1zmC6\n4UJpH6vhnmajD35fsHLYgwDEe4l6qP3LAAABWNPvN4kAAAQDAEcwRQIgZ/LNgg7n\n7AE4O2yZkrXNcqAOmJ3NU2nT6zcnBxPFTTsCIQCjyPbMfWMZTD3kxgxPQ1COw5zJ\nsM0dfNmSr3MiU7EhqDANBgkqhkiG9w0BAQsFAAOCAQEAeyfgUhg9ZWVCaz0f+BQU\n6fMMfmQ1BDzvVFu+ORoAqyJQogxwIdfjrlz/63YFee5qpUsW/aaz4ma3bb4dpE1K\nGsgYe5N3o0xybYlOj+KB61sufYkzQS3HgDevCwjfUlGEbNl4dpO2xh5s5AANXlnz\ns/X0+AJ33/bm+fWIjAbIjluaEoM6GETHTXi4Tlxy0j3nsXsB9tIIUibAdTtButef\nJJRnikGRN+eHjrsLYe0RUmdKOQz1ik6teHt0MQX0aCe8OlXeyGDd9m8u7+y0nAnH\nTVaNuT7vXMWyyXLVUcV898wkBo3Bo3hUiaw0QR0ttgDrf5ZwqPfqpytRW2K5GMZT\nuw==\n-----END CERTIFICATE-----\n\n\n-----BEGIN CERTIFICATE-----\nMIIFZTCCBE2gAwIBAgIQOhAOfxCeGsWcxf/2QNXkQjANBgkqhkiG9w0BAQsFADCB\nyjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL\nExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp\nU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW\nZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0\naG9yaXR5IC0gRzUwHhcNMTYwODExMDAwMDAwWhcNMjYwODEwMjM1OTU5WjCBlzEL\nMAkGA1UEBhMCQ04xJTAjBgNVBAoTHFRydXN0QXNpYSBUZWNobm9sb2dpZXMsIElu\nYy4xHzAdBgNVBAsTFlN5bWFudGVjIFRydXN0IE5ldHdvcmsxHTAbBgNVBAsTFERv\nbWFpbiBWYWxpZGF0ZWQgU1NMMSEwHwYDVQQDExhUcnVzdEFzaWEgRFYgU1NMIENB\nIC0gRzUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC39aSJZG/97x3a\n6Qmuc9+MubagegRAVUmFYHTYTs8IKB2pM7wXN7W8mekdZaEgUjDFxvRBK/DhTb7U\n8ONLsKKdT86aOhzbz2noCTn9wPWnGwkg+/4YKg/dPQQdV9tMsSu0cwqInWHxSAkm\nAI1hYFC9D7Sf7Hp/5cRcD+dK454YMRzNOGLQnCVI8JEqrz6o9SOvQNTqTcfqt6DC\n0UlXG+MPD1eNPjlzf1Vwaab+VSTgySoC+Ikbq2VsdykeOiGXW/OIiASH7+2LcR05\nPmQ7GEOlM8yzoVojFpM8sHz+WxI05ZOPri5+vX3HhHHjWr5432G0dVmgohnZvlVZ\noy8XrlbpAgMBAAGjggF2MIIBcjASBgNVHRMBAf8ECDAGAQH/AgEAMC8GA1UdHwQo\nMCYwJKAioCCGHmh0dHA6Ly9zLnN5bWNiLmNvbS9wY2EzLWc1LmNybDAOBgNVHQ8B\nAf8EBAMCAQYwLgYIKwYBBQUHAQEEIjAgMB4GCCsGAQUFBzABhhJodHRwOi8vcy5z\neW1jZC5jb20wYQYDVR0gBFowWDBWBgZngQwBAgEwTDAjBggrBgEFBQcCARYXaHR0\ncHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUHAgIwGRoXaHR0cHM6Ly9kLnN5\nbWNiLmNvbS9ycGEwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMCkGA1Ud\nEQQiMCCkHjAcMRowGAYDVQQDExFTeW1hbnRlY1BLSS0yLTYwMTAdBgNVHQ4EFgQU\nbVjHfxrn4T8upoyXNUK79NM4rD8wHwYDVR0jBBgwFoAUf9Nlp8Ld7LvwMAnzQzn6\nAq8zMTMwDQYJKoZIhvcNAQELBQADggEBABUphhBbeG7scE3EveIN0dOjXPgwgQi8\nI2ZAKYm6DawoGz1lEJVdvFmkyMbP973X80b7mKmn0nNbe1kjA4M0O0hHaMM1ZaEv\n7e9vHEAoGyysMO6HzPWYMkyNxcCV7Nos2Uv4RvLDpQHh7P4Kt6fUU13ipcynrtQD\n1lFUM0yoTzwwFsPu3Pk+94hL58ErqwqJQwxoHMgLIQeMVHeNKcWFy1bddSbIbCWU\nZs6cMxhrra062ZCpDCbxyEaFNGAtYQMqNz55Z/14XgSUONZ/cJTns6QKhpcgTOwB\nfnNzRnk+aWreP7osKhXlz4zs+llP7goBDKFOMMtoEXx3YjJCKgpqmBU=\n-----END CERTIFICATE-----",
    }

    try:
        resp = client.ucloudstack().create_certificate(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["CertificateID_client"] = utest.value_at_path(
        resp, "CertificateID"
    )
    return resp


@scenario.api(
    title="查询证书",
    max_retries=3,
    retry_interval=1,
    startup_delay=5,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeCertificateResponse"),
    ],
    action="DescribeCertificate",
)
def describe_certificate_11(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "CertificateType": "ServerCrt",
        "CertificateIDs": [variables.get("CertificateID_server"),],
    }

    try:
        resp = client.ucloudstack().describe_certificate(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["ssl_ser"] = utest.value_at_path(resp, "Infos.0.CertificateID")
    return resp


@scenario.api(
    title="查询证书",
    max_retries=3,
    retry_interval=1,
    startup_delay=5,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeCertificateResponse"),
    ],
    action="DescribeCertificate",
)
def describe_certificate_12(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "CertificateType": "CACrt",
        "CertificateIDs": [variables.get("CertificateID_client"),],
    }

    try:
        resp = client.ucloudstack().describe_certificate(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["ssl_cl"] = utest.value_at_path(resp, "Infos.0.CertificateID")
    return resp


@scenario.api(
    title="创建负载均衡",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "CreateLBResponse"),
    ],
    action="CreateLB",
)
def create_lb_13(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VPCID": variables.get("VPCID"),
        "VMType": "ComputeSetBBBB",
        "SubnetID": variables.get("SubnetID"),
        "Region": variables.get("Region"),
        "Name": "lb_test1",
        "LBType": "LAN",
        "ChargeType": "Month",
    }

    try:
        resp = client.ucloudstack().create_lb(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["LBID"] = utest.value_at_path(resp, "LBID")
    return resp


@scenario.api(
    title="获取负载均衡信息",
    max_retries=3,
    retry_interval=1,
    startup_delay=90,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeLBResponse"),
        ("str_eq", "Infos.0.LBStatus", "Running"),
    ],
    action="DescribeLB",
)
def describe_lb_14(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().describe_lb(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="创建负载均衡VServer",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "CreateVSResponse"),
    ],
    action="CreateVS",
)
def create_vs_15(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "ServerCertificateID": variables.get("ssl_ser"),
        "Scheduler": "wrr",
        "SSLMode": "duplex",
        "Region": variables.get("Region"),
        "Protocol": "HTTPS",
        "Port": 443,
        "LBID": variables.get("LBID"),
        "HealthcheckType": "Port",
        "CACertificateID": variables.get("ssl_cl"),
    }

    try:
        resp = client.ucloudstack().create_vs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["VSID"] = utest.value_at_path(resp, "VSID")
    return resp


@scenario.api(
    title="添加服务节点",
    max_retries=3,
    retry_interval=1,
    startup_delay=10,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "CreateRSResponse"),
    ],
    action="CreateRS",
)
def create_rs_16(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Weight": 1,
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "Port": 189,
        "LBID": variables.get("LBID"),
        "BindResourceID": variables.get("VMID"),
    }

    try:
        resp = client.ucloudstack().create_rs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["RSID"] = utest.value_at_path(resp, "RSID")
    return resp


@scenario.api(
    title="获取服务节点信息",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeRSResponse"),
    ],
    action="DescribeRS",
)
def describe_rs_17(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().describe_rs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="修改负载均衡VServer",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "UpdateVSResponse"),
    ],
    action="UpdateVS",
)
def update_vs_18(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VSID": variables.get("VSID"),
        "Scheduler": "ip_hash",
        "Region": variables.get("Region"),
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().update_vs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="移除服务节点",
    max_retries=3,
    retry_interval=1,
    startup_delay=30,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DeleteRSResponse"),
    ],
    action="DeleteRS",
)
def delete_rs_19(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "RSID": variables.get("RSID"),
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().delete_rs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="删除VServer",
    max_retries=3,
    retry_interval=1,
    startup_delay=10,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DeleteVSResponse"),
    ],
    action="DeleteVS",
)
def delete_vs_20(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().delete_vs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="查询操作日志",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeOPLogsResponse"),
    ],
    action="DescribeOPLogs",
)
def describe_op_logs_21(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "ResourceType": "lb",
        "ResourceID": variables.get("LBID"),
        "Region": variables.get("Region"),
        "Offset": 0,
        "Limit": 100,
        "IsSuccess": 1,
        "EndTime": variables.get("EndTime"),
        "BeginTime": variables.get("BeginTime"),
    }

    try:
        resp = client.ucloudstack().describe_op_logs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="删除负载均衡",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DeleteLBResponse"),
    ],
    action="DeleteLB",
)
def delete_lb_22(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().delete_lb(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="删除证书",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DeleteCertificateResponse"),
    ],
    action="DeleteCertificate",
)
def delete_certificate_23(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "CertificateID": variables.get("CertificateID_server"),
    }

    try:
        resp = client.ucloudstack().delete_certificate(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="删除证书",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DeleteCertificateResponse"),
    ],
    action="DeleteCertificate",
)
def delete_certificate_24(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "CertificateID": variables.get("CertificateID_client"),
    }

    try:
        resp = client.ucloudstack().delete_certificate(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="断电虚拟机",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "PoweroffVMInstanceResponse"),
    ],
    action="PoweroffVMInstance",
)
def poweroff_vm_instance_25(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VMID": variables.get("VMID"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().poweroff_vm_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="断电虚拟机",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "PoweroffVMInstanceResponse"),
    ],
    action="PoweroffVMInstance",
)
def poweroff_vm_instance_26(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VMID": variables.get("VMID_1"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().poweroff_vm_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="删除虚拟机",
    max_retries=3,
    retry_interval=1,
    startup_delay=30,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DeleteVMInstanceResponse"),
    ],
    action="DeleteVMInstance",
)
def delete_vm_instance_27(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VMID": variables.get("VMID"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().delete_vm_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="删除虚拟机",
    max_retries=3,
    retry_interval=1,
    startup_delay=30,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DeleteVMInstanceResponse"),
    ],
    action="DeleteVMInstance",
)
def delete_vm_instance_28(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VMID": variables.get("VMID_1"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().delete_vm_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp
