""" Code is generated by ucloud-model, DO NOT EDIT IT. """


import pytest

from ucloud.core import exc
from ucloud.testing import funcs, op, env, utest
from ucloud.testing.driver import spec


scenario = spec.scenario(5183, "UCloudStack_02", owners=["lisa.wang@ucloud.cn"])


@pytest.mark.skipif(env.is_ut(), reason=env.get_skip_reason())
def test_scenario_5183(ustack_client, variables):
    scenario.store.update(variables)

    scenario.store["Region"] = "cn"
    scenario.store["Zone"] = "zone-01"
    scenario.store["BeginTime"] = funcs.get_timestamp(10,) - 3600
    scenario.store["EndTime"] = funcs.get_timestamp(10,)

    # 查询VPC信息
    describe_vpc_00(ustack_client)

    # 查询安全组信息
    describe_security_group_01(ustack_client)

    # 查询存储类型
    describe_storage_type_02(ustack_client)

    # 查询主机机型
    describe_vm_type_03(ustack_client)

    # 获取镜像信息，包括默认镜像和自制镜像。
    describe_image_04(ustack_client)

    # 获取镜像信息，包括默认镜像和自制镜像。
    describe_image_05(ustack_client)

    # 创建虚拟机
    create_vm_instance_06(ustack_client)

    # 查询虚拟机
    describe_vm_instance_07(ustack_client)

    # 申请外网IP
    allocate_eip_08(ustack_client)

    # 创建负载均衡
    create_lb_09(ustack_client)

    # 获取负载均衡信息
    describe_lb_10(ustack_client)

    # 创建负载均衡VServer
    create_vs_11(ustack_client)

    # 修改负载均衡VServer
    update_vs_12(ustack_client)

    # 添加服务节点
    create_rs_13(ustack_client)

    # 修改服务节点
    update_rs_14(ustack_client)

    # 获取服务节点信息
    describe_rs_15(ustack_client)

    # 禁用服务节点
    disable_rs_16(ustack_client)

    # 获取服务节点信息
    describe_rs_17(ustack_client)

    # 启用服务节点
    enable_rs_18(ustack_client)

    # 获取服务节点信息
    describe_rs_19(ustack_client)

    # 创建内容转发规则
    create_vs_policy_20(ustack_client)

    # 获取内容转发规则信息
    describe_vs_policy_21(ustack_client)

    # 更新内容转发规则
    update_vs_policy_22(ustack_client)

    # 删除内容转发规则
    delete_vs_policy_23(ustack_client)

    # 移除服务节点
    delete_rs_24(ustack_client)

    # 断电虚拟机
    poweroff_vm_instance_25(ustack_client)

    # 删除虚拟机
    delete_vm_instance_26(ustack_client)

    # 删除负载均衡
    delete_lb_27(ustack_client)


@scenario.api(
    title="查询VPC信息",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeVPCResponse"),
    ],
    action="DescribeVPC",
)
def describe_vpc_00(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().describe_vpc(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["VPCID"] = utest.value_at_path(resp, "Infos.0.VPCID")
    variables["SubnetID"] = utest.value_at_path(
        resp, "Infos.0.SubnetInfos.0.SubnetID"
    )
    return resp


@scenario.api(
    title="查询安全组信息",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeSecurityGroupResponse"),
    ],
    action="DescribeSecurityGroup",
)
def describe_security_group_01(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().describe_security_group(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["SGID"] = utest.value_at_path(resp, "Infos.0.SGID")
    return resp


@scenario.api(
    title="查询存储类型",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeStorageTypeResponse"),
    ],
    action="DescribeStorageType",
)
def describe_storage_type_02(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().describe_storage_type(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["StorageType"] = utest.value_at_path(resp, "Infos.0.StorageType")
    return resp


@scenario.api(
    title="查询主机机型",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeVMTypeResponse"),
    ],
    action="DescribeVMType",
)
def describe_vm_type_03(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().describe_vm_type(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["VMType"] = "ComputeSetBBBB"
    return resp


@scenario.api(
    title="获取镜像信息，包括默认镜像和自制镜像。",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeImageResponse"),
    ],
    action="DescribeImage",
)
def describe_image_04(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().describe_image(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["Infos"] = utest.value_at_path(resp, "Infos")
    return resp


@scenario.api(
    title="获取镜像信息，包括默认镜像和自制镜像。",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeImageResponse"),
    ],
    action="DescribeImage",
)
def describe_image_05(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "ImageIDs": [
            funcs.search_value(
                variables.get("Infos"),
                "OSName",
                "CentOS 6.5 x86_64",
                "ImageID",
            ),
        ],
    }

    try:
        resp = client.ucloudstack().describe_image(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["ImageID"] = utest.value_at_path(resp, "Infos.0.ImageID")
    return resp


@scenario.api(
    title="创建虚拟机",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "CreateVMInstanceResponse"),
    ],
    action="CreateVMInstance",
)
def create_vm_instance_06(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "WANSGID": variables.get("SGID"),
        "VPCID": variables.get("VPCID"),
        "VMType": variables.get("VMType"),
        "SubnetID": variables.get("SubnetID"),
        "Region": variables.get("Region"),
        "Quantity": 1,
        "Password": "Zhongshang_2018",
        "Name": "host_test",
        "Memory": 2048,
        "ImageID": variables.get("ImageID"),
        "DataDiskSpace": 10,
        "DataDiskSetType": "StorageSetBBBB",
        "ChargeType": "Month",
        "CPU": 1,
        "BootDiskSetType": "StorageSetBBBB",
    }

    try:
        resp = client.ucloudstack().create_vm_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["VMID"] = utest.value_at_path(resp, "VMID")
    return resp


@scenario.api(
    title="查询虚拟机",
    max_retries=3,
    retry_interval=1,
    startup_delay=90,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeVMInstanceResponse"),
        ("str_eq", "Infos.0.State", "Running"),
    ],
    action="DescribeVMInstance",
)
def describe_vm_instance_07(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VMIDs": [variables.get("VMID"),],
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().describe_vm_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["InterfaceID"] = utest.value_at_path(
        resp, "Infos.0.IPInfos.0.InterfaceID"
    )
    variables["DiskID"] = utest.value_at_path(
        resp, "Infos.0.DiskInfos.0.DiskID"
    )
    return resp


@scenario.api(
    title="申请外网IP",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "AllocateEIPResponse"),
    ],
    action="AllocateEIP",
)
def allocate_eip_08(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "OperatorName": "Bgp",
        "Name": "test_eip",
        "ChargeType": "Month",
        "Bandwidth": 2,
    }

    try:
        resp = client.ucloudstack().allocate_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["EIPID"] = utest.value_at_path(resp, "EIPID")
    return resp


@scenario.api(
    title="创建负载均衡",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "CreateLBResponse"),
    ],
    action="CreateLB",
)
def create_lb_09(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VPCID": variables.get("VPCID"),
        "VMType": variables.get("VMType"),
        "SubnetID": variables.get("SubnetID"),
        "SGID": variables.get("SGID"),
        "Region": variables.get("Region"),
        "Name": "lb_test1",
        "LBType": "WAN",
        "EIPID": variables.get("EIPID"),
        "ChargeType": "Month",
    }

    try:
        resp = client.ucloudstack().create_lb(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["LBID"] = utest.value_at_path(resp, "LBID")
    return resp


@scenario.api(
    title="获取负载均衡信息",
    max_retries=3,
    retry_interval=1,
    startup_delay=60,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeLBResponse"),
        ("str_eq", "Infos.0.LBStatus", "Running"),
    ],
    action="DescribeLB",
)
def describe_lb_10(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "LBIDs": [variables.get("LBID"),],
    }

    try:
        resp = client.ucloudstack().describe_lb(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="创建负载均衡VServer",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "CreateVSResponse"),
    ],
    action="CreateVS",
)
def create_vs_11(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Scheduler": "wrr",
        "Region": variables.get("Region"),
        "Protocol": "HTTP",
        "Port": 123,
        "LBID": variables.get("LBID"),
        "HealthcheckType": "Port",
    }

    try:
        resp = client.ucloudstack().create_vs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["VSID"] = utest.value_at_path(resp, "VSID")
    return resp


@scenario.api(
    title="修改负载均衡VServer",
    max_retries=3,
    retry_interval=1,
    startup_delay=10,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "UpdateVSResponse"),
    ],
    action="UpdateVS",
)
def update_vs_12(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VSID": variables.get("VSID"),
        "Scheduler": "ip_hash",
        "Region": variables.get("Region"),
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().update_vs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="添加服务节点",
    max_retries=3,
    retry_interval=1,
    startup_delay=10,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "CreateRSResponse"),
    ],
    action="CreateRS",
)
def create_rs_13(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Weight": 1,
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "Port": 112,
        "LBID": variables.get("LBID"),
        "BindResourceID": variables.get("VMID"),
    }

    try:
        resp = client.ucloudstack().create_rs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["RSID"] = utest.value_at_path(resp, "RSID")
    return resp


@scenario.api(
    title="修改服务节点",
    max_retries=3,
    retry_interval=1,
    startup_delay=10,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "UpdateRSResponse"),
    ],
    action="UpdateRS",
)
def update_rs_14(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Weight": 55,
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "RSID": variables.get("RSID"),
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().update_rs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="获取服务节点信息",
    max_retries=3,
    retry_interval=1,
    startup_delay=30,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeRSResponse"),
    ],
    action="DescribeRS",
)
def describe_rs_15(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().describe_rs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["RSID_1"] = utest.value_at_path(resp, "Infos.0.RSID")
    return resp


@scenario.api(
    title="禁用服务节点",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DisableRSResponse"),
    ],
    action="DisableRS",
)
def disable_rs_16(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "RSID": variables.get("RSID"),
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().disable_rs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="获取服务节点信息",
    max_retries=3,
    retry_interval=1,
    startup_delay=30,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeRSResponse"),
        ("str_eq", "Infos.0.RSMode", "Disable"),
    ],
    action="DescribeRS",
)
def describe_rs_17(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "RSIDs": [variables.get("RSID"),],
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().describe_rs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="启用服务节点",
    max_retries=3,
    retry_interval=1,
    startup_delay=10,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "EnableRSResponse"),
    ],
    action="EnableRS",
)
def enable_rs_18(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "RSID": variables.get("RSID"),
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().enable_rs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="获取服务节点信息",
    max_retries=3,
    retry_interval=1,
    startup_delay=30,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeRSResponse"),
        ("str_eq", "Infos.0.RSMode", "Enable"),
    ],
    action="DescribeRS",
)
def describe_rs_19(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "RSIDs": [variables.get("RSID"),],
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().describe_rs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="创建内容转发规则",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "CreateVSPolicyResponse"),
    ],
    action="CreateVSPolicy",
)
def create_vs_policy_20(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "RSIDs": [variables.get("RSID"),],
        "Path": "/test12321",
        "LBID": variables.get("LBID"),
        "Domain": "test.com11",
    }

    try:
        resp = client.ucloudstack().create_vs_policy(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["PolicyID"] = utest.value_at_path(resp, "PolicyID")
    return resp


@scenario.api(
    title="获取内容转发规则信息",
    max_retries=3,
    retry_interval=1,
    startup_delay=20,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeVSPolicyResponse"),
    ],
    action="DescribeVSPolicy",
)
def describe_vs_policy_21(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "PolicyIDs": [variables.get("PolicyID"),],
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().describe_vs_policy(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="更新内容转发规则",
    max_retries=3,
    retry_interval=1,
    startup_delay=10,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "UpdateVSPolicyResponse"),
    ],
    action="UpdateVSPolicy",
)
def update_vs_policy_22(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "PolicyID": variables.get("PolicyID"),
        "Path": "/testnew",
        "LBID": variables.get("LBID"),
        "Domain": "test.comnew",
    }

    try:
        resp = client.ucloudstack().update_vs_policy(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="删除内容转发规则",
    max_retries=3,
    retry_interval=1,
    startup_delay=10,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DeleteVSPolicyResponse"),
    ],
    action="DeleteVSPolicy",
)
def delete_vs_policy_23(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "PolicyID": variables.get("PolicyID"),
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().delete_vs_policy(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="移除服务节点",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DeleteRSResponse"),
    ],
    action="DeleteRS",
)
def delete_rs_24(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VSID": variables.get("VSID"),
        "Region": variables.get("Region"),
        "RSID": variables.get("RSID"),
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().delete_rs(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="断电虚拟机",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "PoweroffVMInstanceResponse"),
    ],
    action="PoweroffVMInstance",
)
def poweroff_vm_instance_25(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VMID": variables.get("VMID"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().poweroff_vm_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="删除虚拟机",
    max_retries=3,
    retry_interval=1,
    startup_delay=60,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DeleteVMInstanceResponse"),
    ],
    action="DeleteVMInstance",
)
def delete_vm_instance_26(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "VMID": variables.get("VMID"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.ucloudstack().delete_vm_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.api(
    title="删除负载均衡",
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DeleteLBResponse"),
    ],
    action="DeleteLB",
)
def delete_lb_27(step, client):
    variables = step.store

    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "LBID": variables.get("LBID"),
    }

    try:
        resp = client.ucloudstack().delete_lb(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp
