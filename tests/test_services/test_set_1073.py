""" Code is generated by ucloud-model, DO NOT EDIT IT. """

import pytest
import logging

from ucloud.core import exc
from ucloud.testing import env, funcs, op, utest

logger = logging.getLogger(__name__)


scenario = utest.Scenario(255)


@pytest.mark.skipif(env.is_ut(), reason=env.get_skip_reason())
def test_set_1073(client: utest.Client, variables: dict):
    scenario.initial(variables)

    scenario.variables["Password"] = "dXFhQHVjbG91ZA=="
    scenario.variables["Type"] = "SSD-2"
    scenario.variables["Name"] = "test123123"
    scenario.variables["Remark"] = "test123123"
    scenario.variables["ChargeType"] = "Month"
    scenario.variables["ProjectId"] = "org-xbbyex"

    scenario.run(client)


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribePHostImageResponse"),
    ],
    action="DescribePHostImage",
)
def describe_phost_image_00(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "ImageType": "Base",
    }

    try:
        resp = client.uphost().describe_phost_image(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["ImageID1"] = utest.value_at_path(resp, "ImageSet.0.ImageId")
    variables["ImageID2"] = utest.value_at_path(resp, "ImageSet.2.ImageId")
    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "GetPHostPriceResponse"),
    ],
    action="GetPHostPrice",
)
def get_phost_price_01(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "Quantity": 1,
        "Count": 1,
        "ChargeType": "Month",
    }

    try:
        resp = client.uphost().get_phost_price(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribePHostTagsResponse"),
    ],
    action="DescribePHostTags",
)
def describe_phost_tags_02(client: utest.Client, variables: dict):
    d = {"Zone": variables.get("Zone"), "Region": variables.get("Region")}

    try:
        resp = client.uphost().describe_phost_tags(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "CreatePHostResponse"),
    ],
    action="CreatePHost",
)
def create_phost_03(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Remark": variables.get("Remark"),
        "Region": variables.get("Region"),
        "Password": variables.get("Password"),
        "Name": variables.get("Name"),
        "ImageId": variables.get("ImageID1"),
        "ChargeType": variables.get("ChargeType"),
    }

    try:
        resp = client.uphost().create_phost(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["PHost"] = utest.value_at_path(resp, "PHostId.0")
    return resp


@scenario.step(
    max_retries=60,
    retry_interval=60,
    startup_delay=0,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribePHostResponse"),
        ("str_eq", "PHostSet.0.PHostType", variables.get("Type")),
        ("str_eq", "PHostSet.0.Name", variables.get("Name")),
        ("str_eq", "PHostSet.0.PHostId", variables.get("PHost")),
        ("str_eq", "PHostSet.0.Remark", variables.get("Remark")),
        ("str_eq", "PHostSet.0.Zone", variables.get("Zone")),
        ("str_eq", "PHostSet.0.PMStatus", "Running"),
    ],
    action="DescribePHost",
)
def describe_phost_04(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "PHostId": [variables.get("PHost")],
    }

    try:
        resp = client.uphost().describe_phost(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=600,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "RebootPHostResponse"),
    ],
    action="RebootPHost",
)
def reboot_phost_05(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "ProjectId": variables.get("ProjectId"),
        "PHostId": variables.get("PHost"),
    }

    try:
        resp = client.uphost().reboot_phost(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=120,
    retry_interval=60,
    startup_delay=0,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "PHostSet.0.PMStatus", "Running"),
    ],
    action="DescribePHost",
)
def describe_phost_06(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "PHostId": [variables.get("PHost")],
    }

    try:
        resp = client.uphost().describe_phost(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=10,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "StopPHostResponse"),
    ],
    action="StopPHost",
)
def stop_phost_07(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "ProjectId": variables.get("ProjectId"),
        "PHostId": variables.get("PHost"),
    }

    try:
        resp = client.invoke("StopPHost", d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=30,
    retry_interval=60,
    startup_delay=10,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "PHostSet.0.PMStatus", "Stopped"),
    ],
    action="DescribePHost",
)
def describe_phost_08(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "PHostId": [variables.get("PHost")],
    }

    try:
        resp = client.uphost().describe_phost(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=10,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "ReinstallPHostResponse"),
    ],
    action="ReinstallPHost",
)
def reinstall_phost_09(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "Password": variables.get("Password"),
        "PHostId": variables.get("PHost"),
        "ImageId": variables.get("ImageID2"),
    }

    try:
        resp = client.uphost().reinstall_phost(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=120,
    retry_interval=60,
    startup_delay=0,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribePHostResponse"),
        ("str_eq", "PHostSet.0.PHostType", variables.get("Type")),
        ("str_eq", "PHostSet.0.Name", variables.get("Name")),
        ("str_eq", "PHostSet.0.PHostId", variables.get("PHost")),
        ("str_eq", "PHostSet.0.Remark", variables.get("Remark")),
        ("str_eq", "PHostSet.0.Zone", variables.get("Zone")),
        ("str_eq", "PHostSet.0.PMStatus", "Running"),
    ],
    action="DescribePHost",
)
def describe_phost_10(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "PHostId": [variables.get("PHost")],
    }

    try:
        resp = client.uphost().describe_phost(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "PoweroffPHostResponse"),
    ],
    action="PoweroffPHost",
)
def poweroff_phost_11(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "ProjectId": variables.get("ProjectId"),
        "PHostId": variables.get("PHost"),
    }

    try:
        resp = client.uphost().poweroff_phost(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=30,
    retry_interval=60,
    startup_delay=0,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "PHostSet.0.PMStatus", "Stopped"),
    ],
    action="DescribePHost",
)
def describe_phost_12(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "PHostId": [variables.get("PHost")],
    }

    try:
        resp = client.uphost().describe_phost(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=10,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "TerminatePHostResponse"),
    ],
    action="TerminatePHost",
)
def terminate_phost_13(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "ProjectId": variables.get("ProjectId"),
        "PHostId": variables.get("PHost"),
    }

    try:
        resp = client.uphost().terminate_phost(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp
