""" Code is generated by ucloud-model, DO NOT EDIT IT. """

import pytest
import logging

from ucloud.core import exc
from ucloud.testing import env, funcs, op, utest

logger = logging.getLogger(__name__)


scenario = utest.Scenario(499)


@pytest.mark.skipif(env.is_ut(), reason=env.get_skip_reason())
def test_set_499(client: utest.Client, variables: dict):
    scenario.initial(variables)

    scenario.variables["Region"] = "cn-bj2"
    scenario.variables["Zone"] = "cn-bj2-02"
    scenario.variables["DBTypeId"] = "percona-5.5"
    scenario.variables["InstanceMode"] = "HA"
    scenario.variables["InstanceType"] = "SATA_SSD"
    scenario.variables["Port"] = 3306
    scenario.variables["MemoryLimit"] = 1000
    scenario.variables["DiskSpace"] = 20
    scenario.variables["DBName"] = "auto_hassd_"
    scenario.variables["UseSSD"] = True

    scenario.run(client)


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="DescribeUDBType",
)
def describe_udb_type_00(client: utest.Client, variables: dict):
    d = {"Zone": variables.get("Zone"), "Region": variables.get("Region")}

    try:
        resp = client.udb().describe_udb_type(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="DescribeUDBParamGroup",
)
def describe_udb_param_group_01(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "Offset": 0,
        "Limit": 100,
    }

    try:
        resp = client.udb().describe_udb_param_group(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["DataSet_paramGroup"] = utest.value_at_path(resp, "DataSet")
    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="DescribeUDBInstancePrice",
)
def describe_udb_instance_price_02(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "MemoryLimit": variables.get("MemoryLimit"),
        "DiskSpace": variables.get("DiskSpace"),
        "DBTypeId": variables.get("DBTypeId"),
        "Count": 1,
    }

    try:
        resp = client.udb().describe_udb_instance_price(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="CheckUDBInstanceAllowance",
)
def check_udb_instance_allowance_03(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "UseSSD": variables.get("UseSSD"),
        "Region": variables.get("Region"),
        "MemoryLimit": variables.get("MemoryLimit"),
        "DiskSpace": variables.get("DiskSpace"),
        "Count": 1,
        "ClassType": "SQL",
    }

    try:
        resp = client.invoke("CheckUDBInstanceAllowance", d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=1,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="CreateUDBInstance",
)
def create_udb_instance_04(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "Quantity": 0,
        "Port": variables.get("Port"),
        "ParamGroupId": funcs.search_value(
            variables.get("DataSet_paramGroup"),
            "DBTypeId",
            variables.get("DBTypeId"),
            "GroupId",
        ),
        "Name": funcs.concat(
            variables.get("DBName"), variables.get("DBTypeId")
        ),
        "MemoryLimit": variables.get("MemoryLimit"),
        "InstanceType": variables.get("InstanceType"),
        "InstanceMode": variables.get("InstanceMode"),
        "DiskSpace": variables.get("DiskSpace"),
        "DBTypeId": variables.get("DBTypeId"),
        "ChargeType": "Month",
        "AdminPassword": "guanliyuanmima",
    }

    try:
        resp = client.udb().create_udb_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["DBId"] = utest.value_at_path(resp, "DBId")
    return resp


@scenario.step(
    max_retries=50,
    retry_interval=10,
    startup_delay=30,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "State", "Running"),
    ],
    action="DescribeUDBInstanceState",
)
def describe_udb_instance_state_05(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "DBId": variables.get("DBId"),
    }

    try:
        resp = client.udb().describe_udb_instance_state(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=2,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        (
            "str_eq",
            "DataSet.0.Name",
            funcs.concat(variables.get("DBName"), variables.get("DBTypeId")),
        ),
        ("str_eq", "DataSet.0.DBTypeId", variables.get("DBTypeId")),
    ],
    action="DescribeUDBInstance",
)
def describe_udb_instance_06(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "Offset": 0,
        "Limit": 100,
        "DBId": variables.get("DBId"),
        "ClassType": "sql",
    }

    try:
        resp = client.udb().describe_udb_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=1,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="CreateUDBParamGroup",
)
def create_udb_param_group_07(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "SrcGroupId": funcs.search_value(
            variables.get("DataSet_paramGroup"),
            "DBTypeId",
            variables.get("DBTypeId"),
            "GroupId",
        ),
        "Region": variables.get("Region"),
        "GroupName": "auto_config_create",
        "Description": "self_create",
        "DBTypeId": variables.get("DBTypeId"),
    }

    try:
        resp = client.udb().create_udb_param_group(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["create_config_id"] = utest.value_at_path(resp, "GroupId")
    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=1,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="UpdateUDBParamGroup",
)
def update_udb_param_group_08(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Value": 2,
        "Region": variables.get("Region"),
        "Key": "auto_increment_increment",
        "GroupId": variables.get("create_config_id"),
    }

    try:
        resp = client.udb().update_udb_param_group(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=1,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="UploadUDBParamGroup",
)
def upload_udb_param_group_09(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "GroupName": "auto_config_upload",
        "Description": "self_upload",
        "DBTypeId": variables.get("DBTypeId"),
        "Content": "W215c3FsZF0KYXV0b19pbmNyZW1lbnRfaW5jcmVtZW50ID0gMgpiYWNrX2xvZyA9IDIwMDAKYmlubG9nLWZvcm1hdCA9IE1JWEVECmNoYXJhY3Rlcl9zZXRfc2VydmVyID0gdXRmOApldmVudF9zY2hlZHVsZXIgPSBPTgpleHBpcmVfbG9nc19kYXlzID0gNwppbm5vZGJfYnVmZmVyX3Bvb2xfc2l6ZSA9IDUzNjg3MDkxMjAwCmlubm9kYl9maWxlX3Blcl90YWJsZSA9IDEKaW5ub2RiX2ZsdXNoX2xvZ19hdF90cnhfY29tbWl0ID0gMgppbm5vZGJfZmx1c2hfbWV0aG9kID0gT19ESVJFQ1QKaW5ub2RiX2lvX2NhcGFjaXR5ID0gMjAwMAppbm5vZGJfbG9nX2J1ZmZlcl9zaXplID0gODM4ODYwOAppbm5vZGJfbWF4X2RpcnR5X3BhZ2VzX3BjdCA9IDUwCmlubm9kYl9vcGVuX2ZpbGVzID0gMTAyNAppbm5vZGJfcmVhZF9pb190aHJlYWRzID0gOAppbm5vZGJfc29ydF9idWZmZXJfc2l6ZSA9IDEwNDg1NzYKaW5ub2RiX3RocmVhZF9jb25jdXJyZW5jeSA9IDIwCmlubm9kYl93cml0ZV9pb190aHJlYWRzID0gOAprZXlfYnVmZmVyX3NpemUgPSAzMzU1NDQzMgpsb2NhbF9pbmZpbGUgPSAxCmxvZ19iaW5fdHJ1c3RfZnVuY3Rpb25fY3JlYXRvcnMgPSAxCmxvbmdfcXVlcnlfdGltZSA9IDMKbWF4X2FsbG93ZWRfcGFja2V0ID0gMTY3NzcyMTYKbWF4X2Nvbm5lY3RfZXJyb3JzID0gMTAwMDAwMAptYXhfY29ubmVjdGlvbnMgPSAyMDAwCm15aXNhbV9zb3J0X2J1ZmZlcl9zaXplID0gODM4ODYwOApuZXRfYnVmZmVyX2xlbmd0aCA9IDgxOTIKcGVyZm9ybWFuY2Vfc2NoZW1hID0gMApwZXJmb3JtYW5jZV9zY2hlbWFfbWF4X3RhYmxlX2luc3RhbmNlcyA9IDIwMApxdWVyeV9jYWNoZV9zaXplID0gMApxdWVyeV9jYWNoZV90eXBlID0gMApyZWFkX2J1ZmZlcl9zaXplID0gMjYyMTQ0CnJlYWRfcm5kX2J1ZmZlcl9zaXplID0gNTI0Mjg4CnNraXBfbmFtZV9yZXNvbHZlID0gMQpzb3J0X2J1ZmZlcl9zaXplID0gNTI0Mjg4CnN5bmNfYmlubG9nID0gMQp0YWJsZV9vcGVuX2NhY2hlID0gMTI4CnRocmVhZF9jYWNoZV9zaXplID0gNTA=",
    }

    try:
        resp = client.udb().upload_udb_param_group(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["upload_config_id"] = utest.value_at_path(resp, "GroupId")
    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=5,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "ExtractUDBParamGroupResponse"),
    ],
    action="ExtractUDBParamGroup",
)
def extract_udb_param_group_10(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "GroupId": variables.get("upload_config_id"),
    }

    try:
        resp = client.invoke("ExtractUDBParamGroup", d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "ChangeUDBParamGroupResponse"),
    ],
    action="ChangeUDBParamGroup",
)
def change_udb_param_group_11(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "GroupId": variables.get("upload_config_id"),
        "DBId": variables.get("DBId"),
    }

    try:
        resp = client.invoke("ChangeUDBParamGroup", d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=10,
    retry_interval=3,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeUDBInstanceResponse"),
        ("str_eq", "DataSet.0.ParamGroupId", variables.get("upload_config_id")),
    ],
    action="DescribeUDBInstance",
)
def describe_udb_instance_12(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "DBId": variables.get("DBId"),
    }

    try:
        resp = client.udb().describe_udb_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "RestartUDBInstanceResponse"),
    ],
    action="RestartUDBInstance",
)
def restart_udb_instance_13(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "DBId": variables.get("DBId"),
    }

    try:
        resp = client.udb().restart_udb_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=100,
    retry_interval=3,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeUDBInstanceResponse"),
        ("str_eq", "DataSet.0.State", "Running"),
    ],
    action="DescribeUDBInstance",
)
def describe_udb_instance_14(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "DBId": variables.get("DBId"),
    }

    try:
        resp = client.udb().describe_udb_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeUDBInstanceByParamGroupResponse"),
        (
            "str_eq",
            "DataSet.0.Name",
            funcs.concat(variables.get("DBName"), variables.get("DBTypeId")),
        ),
    ],
    action="DescribeUDBInstanceByParamGroup",
)
def describe_udb_instance_by_param_group_15(
    client: utest.Client, variables: dict
):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "GroupId": variables.get("upload_config_id"),
    }

    try:
        resp = client.invoke("DescribeUDBInstanceByParamGroup", d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=1,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 7064)],
    action="DeleteUDBParamGroup",
)
def delete_udb_param_group_16(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "GroupId": variables.get("upload_config_id"),
    }

    try:
        resp = client.udb().delete_udb_param_group(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "StopUDBInstanceResponse"),
    ],
    action="StopUDBInstance",
)
def stop_udb_instance_17(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "DBId": variables.get("DBId"),
    }

    try:
        resp = client.udb().stop_udb_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=100,
    retry_interval=3,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "DataSet.0.DBTypeId", variables.get("DBTypeId")),
        ("str_eq", "DataSet.0.State", "Shutoff"),
    ],
    action="DescribeUDBInstance",
)
def describe_udb_instance_18(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "Offset": 0,
        "Limit": 100,
        "DBId": variables.get("DBId"),
        "ClassType": "sql",
    }

    try:
        resp = client.udb().describe_udb_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=10,
    fast_fail=False,
    action="DeleteUDBInstance",
)
def delete_udb_instance_19(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "DBId": variables.get("DBId"),
    }

    try:
        resp = client.udb().delete_udb_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="DeleteUDBParamGroup",
)
def delete_udb_param_group_20(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "GroupId": variables.get("create_config_id"),
    }

    try:
        resp = client.udb().delete_udb_param_group(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp
