""" Code is generated by ucloud-model, DO NOT EDIT IT. """

import pytest
import logging

from ucloud.core import exc
from ucloud.testing import env, funcs, op, utest

logger = logging.getLogger(__name__)


scenario = utest.Scenario(1202)


@pytest.mark.skipif(env.is_ut(), reason=env.get_skip_reason())
def test_set_1202(client: utest.Client, variables: dict):
    scenario.initial(variables)

    scenario.variables["Protocol"] = "memcache"
    scenario.variables["ResourceType"] = "distributed"
    scenario.variables["Name"] = "distributed_memcache"

    scenario.run(client)


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="CreateUMemSpace",
)
def create_umem_space_00(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Size": 8,
        "Region": variables.get("Region"),
        "Quantity": 1,
        "Protocol": variables.get("Protocol"),
        "Name": variables.get("Name"),
        "ChargeType": "Month",
    }

    try:
        resp = client.umem().create_umem_space(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["Space_Id"] = utest.value_at_path(resp, "SpaceId")
    return resp


@scenario.step(
    max_retries=30,
    retry_interval=10,
    startup_delay=3,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "DataSet.0.State", "Running"),
    ],
    action="DescribeUMem",
)
def describe_umem_01(client: utest.Client, variables: dict):
    d = {
        "ResourceId": variables.get("Space_Id"),
        "Region": variables.get("Region"),
        "Protocol": variables.get("Protocol"),
        "Offset": 0,
        "Limit": 1000,
    }

    try:
        resp = client.invoke("DescribeUMem", d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="ResizeUMemSpace",
)
def resize_umem_space_02(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "SpaceId": variables.get("Space_Id"),
        "Size": 14,
        "Region": variables.get("Region"),
    }

    try:
        resp = client.umem().resize_umem_space(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=30,
    retry_interval=10,
    startup_delay=3,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "DataSet.0.State", "Running"),
    ],
    action="DescribeUMem",
)
def describe_umem_03(client: utest.Client, variables: dict):
    d = {
        "ResourceId": variables.get("Space_Id"),
        "Region": variables.get("Region"),
        "Protocol": variables.get("Protocol"),
        "Offset": 0,
        "Limit": 1000,
    }

    try:
        resp = client.invoke("DescribeUMem", d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="DeleteUMem",
)
def delete_umem_04(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "ResourceType": variables.get("ResourceType"),
        "ResourceId": variables.get("Space_Id"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.invoke("DeleteUMem", d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeUMemSpaceResponse"),
        ("object_not_contains", "DataSet", variables.get("Space_Id")),
    ],
    action="DescribeUMemSpace",
)
def describe_umem_space_05(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "SpaceId": variables.get("Space_Id"),
        "Region": variables.get("Region"),
        "Offset": 0,
        "Limit": 100,
    }

    try:
        resp = client.umem().describe_umem_space(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp
