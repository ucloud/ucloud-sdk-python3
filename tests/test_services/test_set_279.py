""" Code is generated by ucloud-model, DO NOT EDIT IT. """

import pytest
import logging

from ucloud.core import exc
from ucloud.testing import env, funcs, op, utest

logger = logging.getLogger(__name__)


scenario = utest.Scenario(279)


@pytest.mark.skipif(env.is_ut(), reason=env.get_skip_reason())
def test_set_279(client: utest.Client, variables: dict):
    scenario.initial(variables)

    scenario.variables["Image_Id"] = "#{u_get_image_resource($Region,$Zone)}"

    scenario.run(client)


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeImageResponse"),
    ],
    action="DescribeImage",
)
def describe_image_00(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "OsType": "Linux",
        "ImageType": "Base",
    }

    try:
        resp = client.uhost().describe_image(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["Image_Id"] = utest.value_at_path(resp, "ImageSet.0.ImageId")
    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("len_ge", "UHostIds", 0),
    ],
    action="CreateUHostInstance",
)
def create_uhost_instance_01(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "TimemachineFeature": "No",
        "Tag": "Default",
        "Region": variables.get("Region"),
        "Password": "VXFhNzg5VGVzdCFAIyQ7LA==",
        "Name": "eip-s1-bgp",
        "Memory": 1024,
        "LoginMode": "Password",
        "ImageId": variables.get("Image_Id"),
        "HotplugFeature": False,
        "DiskSpace": 0,
        "CPU": 1,
    }

    try:
        resp = client.uhost().create_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["UHostId"] = utest.value_at_path(resp, "UHostIds.0")
    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=120,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="AllocateEIP",
)
def allocate_eip_02(client: utest.Client, variables: dict):
    d = {
        "Tag": "Default",
        "Remark": "test",
        "Region": variables.get("Region"),
        "Quantity": 1,
        "PayMode": "Bandwidth",
        "OperatorName": "Bgp",
        "Name": "eip-bgp-01",
        "ChargeType": "Dynamic",
        "Bandwidth": 2,
    }

    try:
        resp = client.unet().allocate_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["EIPId_01"] = utest.value_at_path(resp, "EIPSet.0.EIPId")
    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=5,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "EIPSet.0.EIPId", variables.get("EIPId_01")),
    ],
    action="DescribeEIP",
)
def describe_eip_03(client: utest.Client, variables: dict):
    d = {
        "Region": variables.get("Region"),
        "EIPIds": [variables.get("EIPId_01")],
    }

    try:
        resp = client.unet().describe_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=5,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="UpdateEIPAttribute",
)
def update_eip_attribute_04(client: utest.Client, variables: dict):
    d = {
        "Tag": "huangchao",
        "Remark": "test-gai",
        "Region": variables.get("Region"),
        "Name": "eip-auto-gai",
        "EIPId": variables.get("EIPId_01"),
    }

    try:
        resp = client.unet().update_eip_attribute(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=5,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="GetEIPPrice",
)
def get_eip_price_05(client: utest.Client, variables: dict):
    d = {
        "Region": variables.get("Region"),
        "OperatorName": "Bgp",
        "Bandwidth": 2,
    }

    try:
        resp = client.unet().get_eip_price(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=5,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="BindEIP",
)
def bind_eip_06(client: utest.Client, variables: dict):
    d = {
        "ResourceType": "uhost",
        "ResourceId": variables.get("UHostId"),
        "Region": variables.get("Region"),
        "EIPId": variables.get("EIPId_01"),
    }

    try:
        resp = client.unet().bind_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=5,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "EIPSet.0.Resource.ResourceID", variables.get("UHostId")),
    ],
    action="DescribeEIP",
)
def describe_eip_07(client: utest.Client, variables: dict):
    d = {
        "Region": variables.get("Region"),
        "EIPIds": [variables.get("EIPId_01")],
    }

    try:
        resp = client.unet().describe_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="ModifyEIPBandwidth",
)
def modify_eip_bandwidth_08(client: utest.Client, variables: dict):
    d = {
        "Region": variables.get("Region"),
        "EIPId": variables.get("EIPId_01"),
        "Bandwidth": 3,
    }

    try:
        resp = client.unet().modify_eip_bandwidth(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=5,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="SetEIPPayMode",
)
def set_eip_pay_mode_09(client: utest.Client, variables: dict):
    d = {
        "Region": variables.get("Region"),
        "PayMode": "Traffic",
        "EIPId": variables.get("EIPId_01"),
        "Bandwidth": 2,
    }

    try:
        resp = client.unet().set_eip_pay_mode(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=5,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="ModifyEIPWeight",
)
def modify_eip_weight_10(client: utest.Client, variables: dict):
    d = {
        "Weight": 100,
        "Region": variables.get("Region"),
        "EIPId": variables.get("EIPId_01"),
    }

    try:
        resp = client.unet().modify_eip_weight(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=5,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "UnBindEIPResponse"),
    ],
    action="UnBindEIP",
)
def un_bind_eip_11(client: utest.Client, variables: dict):
    d = {
        "ResourceType": "uhost",
        "ResourceId": variables.get("UHostId"),
        "Region": variables.get("Region"),
        "EIPId": variables.get("EIPId_01"),
    }

    try:
        resp = client.unet().un_bind_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="AllocateEIP",
)
def allocate_eip_12(client: utest.Client, variables: dict):
    d = {
        "Tag": "Default",
        "Remark": "test",
        "Region": variables.get("Region"),
        "Quantity": 1,
        "PayMode": "Bandwidth",
        "OperatorName": "Bgp",
        "Name": "eip-bgp-01",
        "ChargeType": "Dynamic",
        "Bandwidth": 2,
    }

    try:
        resp = client.unet().allocate_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["EIPId_02"] = utest.value_at_path(resp, "EIPSet.0.EIPId")
    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("gt", "TotalCount", 1),
        ("len_eq", "EIPSet", 1),
    ],
    action="DescribeEIP",
)
def describe_eip_13(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region"), "Limit": 1}

    try:
        resp = client.unet().describe_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=5,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 8039)],
    action="ReleaseEIP",
)
def release_eip_14(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region"), "EIPId": variables.get("EIPId_01")}

    try:
        resp = client.unet().release_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "TotalCount", 0),
    ],
    action="DescribeEIP",
)
def describe_eip_15(client: utest.Client, variables: dict):
    d = {
        "Region": variables.get("Region"),
        "EIPIds": [variables.get("EIPId_01")],
    }

    try:
        resp = client.unet().describe_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="ReleaseEIP",
)
def release_eip_16(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region"), "EIPId": variables.get("EIPId_02")}

    try:
        resp = client.unet().release_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=5,
    fast_fail=False,
    action="PoweroffUHostInstance",
)
def poweroff_uhost_instance_17(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "UHostId": variables.get("UHostId"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.uhost().poweroff_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=60,
    fast_fail=False,
    action="TerminateUHostInstance",
)
def terminate_uhost_instance_18(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "UHostId": variables.get("UHostId"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.uhost().terminate_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp
