""" Code is generated by ucloud-model, DO NOT EDIT IT. """

import pytest
import logging

from ucloud.core import exc
from ucloud.testing import env, funcs, op, utest

logger = logging.getLogger(__name__)


scenario = utest.Scenario(268)


@pytest.mark.skipif(env.is_ut(), reason=env.get_skip_reason())
def test_set_268(client: utest.Client, variables: dict):
    scenario.initial(variables)

    scenario.variables["Region"] = "cn-bj2"
    scenario.variables["eip_bw"] = 2
    scenario.variables["bwp1_bw"] = 3
    scenario.variables["eip_operatorname"] = "Bgp"
    scenario.variables["bwp2_bw"] = 4
    scenario.variables["Image_Id"] = "#{u_get_image_resource($Region,$Zone)}"

    scenario.run(client)


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeImageResponse"),
    ],
    action="DescribeImage",
)
def describe_image_00(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "OsType": "Linux",
        "ImageType": "Base",
    }

    try:
        resp = client.uhost().describe_image(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["Image_Id"] = utest.value_at_path(resp, "ImageSet.0.ImageId")
    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="AllocateEIP",
)
def allocate_eip_01(client: utest.Client, variables: dict):
    d = {
        "Region": variables.get("Region"),
        "PayMode": "Bandwidth",
        "OperatorName": variables.get("eip_operatorname"),
        "Name": "eip_auto",
        "ChargeType": "Month",
        "Bandwidth": variables.get("eip_bw"),
    }

    try:
        resp = client.unet().allocate_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["eip_id"] = utest.value_at_path(resp, "EIPSet.0.EIPId")
    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("len_ge", "UHostIds", 0),
    ],
    action="CreateUHostInstance",
)
def create_uhost_instance_02(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "TimemachineFeature": "No",
        "Tag": "Default",
        "Region": variables.get("Region"),
        "Password": "VXFhNzg5VGVzdCFAIyQ7LA==",
        "Name": "packet-s1-bgp",
        "Memory": 1024,
        "LoginMode": "Password",
        "ImageId": variables.get("Image_Id"),
        "HotplugFeature": False,
        "DiskSpace": 0,
        "CPU": 1,
    }

    try:
        resp = client.uhost().create_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["UHostId"] = utest.value_at_path(resp, "UHostIds.0")
    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=180,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="BindEIP",
)
def bind_eip_03(client: utest.Client, variables: dict):
    d = {
        "ResourceType": "uhost",
        "ResourceId": variables.get("UHostId"),
        "Region": variables.get("Region"),
        "EIPId": variables.get("eip_id"),
    }

    try:
        resp = client.unet().bind_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=5,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="CreateBandwidthPackage",
)
def create_bandwidth_package_04(client: utest.Client, variables: dict):
    d = {
        "TimeRange": 2,
        "Region": variables.get("Region"),
        "EnableTime": 30 + funcs.get_timestamp(10),
        "EIPId": variables.get("eip_id"),
        "Bandwidth": variables.get("bwp1_bw"),
    }

    try:
        resp = client.unet().create_bandwidth_package(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["bwp_id1"] = utest.value_at_path(resp, "BandwidthPackageId")
    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=30,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "DataSets.0.EIPId", variables.get("eip_id")),
        ("str_eq", "DataSets.0.Bandwidth", variables.get("bwp1_bw")),
        ("str_eq", "DataSets.0.BandwidthPackageId", variables.get("bwp_id1")),
    ],
    action="DescribeBandwidthPackage",
)
def describe_bandwidth_package_05(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region"), "Offset": 0, "Limit": 1}

    try:
        resp = client.unet().describe_bandwidth_package(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=3,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="DeleteBandwidthPackage",
)
def delete_bandwidth_package_06(client: utest.Client, variables: dict):
    d = {
        "Region": variables.get("Region"),
        "BandwidthPackageId": variables.get("bwp_id1"),
    }

    try:
        resp = client.unet().delete_bandwidth_package(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="CreateBandwidthPackage",
)
def create_bandwidth_package_07(client: utest.Client, variables: dict):
    d = {
        "TimeRange": 1,
        "Region": variables.get("Region"),
        "EIPId": variables.get("eip_id"),
        "Bandwidth": variables.get("bwp2_bw"),
    }

    try:
        resp = client.unet().create_bandwidth_package(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["bwp_id2"] = utest.value_at_path(resp, "BandwidthPackageId")
    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=30,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "DataSets.0.EIPId", variables.get("eip_id")),
        ("str_eq", "DataSets.0.Bandwidth", variables.get("bwp2_bw")),
        ("str_eq", "DataSets.0.BandwidthPackageId", variables.get("bwp_id2")),
    ],
    action="DescribeBandwidthPackage",
)
def describe_bandwidth_package_08(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region"), "Offset": 0, "Limit": 1}

    try:
        resp = client.unet().describe_bandwidth_package(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=3,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="DeleteBandwidthPackage",
)
def delete_bandwidth_package_09(client: utest.Client, variables: dict):
    d = {
        "Region": variables.get("Region"),
        "BandwidthPackageId": variables.get("bwp_id2"),
    }

    try:
        resp = client.unet().delete_bandwidth_package(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=10,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="UnBindEIP",
)
def un_bind_eip_10(client: utest.Client, variables: dict):
    d = {
        "ResourceType": "uhost",
        "ResourceId": variables.get("UHostId"),
        "Region": variables.get("Region"),
        "EIPId": variables.get("eip_id"),
    }

    try:
        resp = client.unet().un_bind_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=10,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="ReleaseEIP",
)
def release_eip_11(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region"), "EIPId": variables.get("eip_id")}

    try:
        resp = client.unet().release_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=5,
    fast_fail=False,
    action="PoweroffUHostInstance",
)
def poweroff_uhost_instance_12(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "UHostId": variables.get("UHostId"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.uhost().poweroff_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=60,
    fast_fail=False,
    action="TerminateUHostInstance",
)
def terminate_uhost_instance_13(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "UHostId": variables.get("UHostId"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.uhost().terminate_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp
