""" Code is generated by ucloud-model, DO NOT EDIT IT. """

import pytest
import logging

from ucloud.core import exc
from ucloud.testing import env, funcs, op, utest

logger = logging.getLogger(__name__)


scenario = utest.Scenario(302)


@pytest.mark.skipif(env.is_ut(), reason=env.get_skip_reason())
def test_set_302(client: utest.Client, variables: dict):
    scenario.initial(variables)

    scenario.variables["tag"] = "tag_api_test"
    scenario.variables["remark"] = "remark_api_test"
    scenario.variables["fw_name_1"] = funcs.concat(
        "fw_A_", funcs.get_timestamp(13), "_"
    )
    scenario.variables["fw_rule_1_protocol"] = "TCP"
    scenario.variables["fw_rule_1_port"] = 1111
    scenario.variables["fw_rule_1_srcip"] = "0.0.0.0/0"
    scenario.variables["fw_rule_1_action"] = "ACCEPT"
    scenario.variables["fw_rule_1_priority"] = "HIGH"
    scenario.variables["uhost_name_1"] = "firewall_api_test"
    scenario.variables["fw_rule_2_protocol"] = "UDP"
    scenario.variables["fw_rule_2_port"] = 2222
    scenario.variables["fw_rule_2_srcip"] = "10.0.0.0/8"
    scenario.variables["fw_rule_2_action"] = "DROP"
    scenario.variables["fw_rule_2_priority"] = "LOW"
    scenario.variables["fw_name_2"] = funcs.concat(
        "fw_B_", funcs.get_timestamp(13), "_"
    )
    scenario.variables["tag_2"] = "tag_api_test_3"
    scenario.variables["remark_2"] = "remark_api_test_3"
    scenario.variables["Image_Id"] = "#{u_get_image_resource($Region,$Zone)}"
    scenario.variables["recommend_web"] = "recommend web"
    scenario.variables["fw_rule_1"] = "TCP|1111|0.0.0.0/0|ACCEPT|HIGH"
    scenario.variables["fw_rule_2"] = "UDP|2222|10.0.0.0/8|DROP|LOW"

    scenario.run(client)


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeImageResponse"),
    ],
    action="DescribeImage",
)
def describe_image_00(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "OsType": "Linux",
        "ImageType": "Base",
    }

    try:
        resp = client.uhost().describe_image(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["Image_Id"] = utest.value_at_path(resp, "ImageSet.0.ImageId")
    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="DescribeFirewall",
)
def describe_firewall_01(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region")}

    try:
        resp = client.unet().describe_firewall(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=5,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="CreateUHostInstance",
)
def create_uhost_instance_02(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Tag": variables.get("tag"),
        "Region": variables.get("Region"),
        "Password": "VXFhNzg5VGVzdCFAIyQ7LA==",
        "Name": variables.get("uhost_name_1"),
        "Memory": 1024,
        "LoginMode": "Password",
        "ImageId": variables.get("Image_Id"),
        "DiskSpace": 0,
        "CPU": 1,
    }

    try:
        resp = client.uhost().create_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["uhost_id1"] = utest.value_at_path(resp, "UHostIds.0")
    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=180,
    fast_fail=True,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="CreateFirewall",
)
def create_firewall_03(client: utest.Client, variables: dict):
    d = {
        "Tag": variables.get("tag"),
        "Rule": [variables.get("fw_rule_1")],
        "Remark": variables.get("remark"),
        "Region": variables.get("Region"),
        "Name": funcs.concat(variables.get("fw_name_1"), variables.get("Zone")),
    }

    try:
        resp = client.unet().create_firewall(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["fw_id1"] = utest.value_at_path(resp, "FWId")
    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=3,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "DataSet.0.FWId", variables.get("fw_id1")),
        (
            "str_eq",
            "DataSet.0.Name",
            funcs.concat(variables.get("fw_name_1"), variables.get("Zone")),
        ),
        ("str_eq", "DataSet.0.Tag", variables.get("tag")),
        ("str_eq", "DataSet.0.Remark", variables.get("remark")),
        ("str_eq", "DataSet.0.ResourceCount", 0),
        ("str_eq", "DataSet.0.Type", "user defined"),
        (
            "str_eq",
            "DataSet.0.Rule.0.ProtocolType",
            variables.get("fw_rule_1_protocol"),
        ),
        ("str_eq", "DataSet.0.Rule.0.DstPort", variables.get("fw_rule_1_port")),
        ("str_eq", "DataSet.0.Rule.0.SrcIP", variables.get("fw_rule_1_srcip")),
        (
            "str_eq",
            "DataSet.0.Rule.0.RuleAction",
            variables.get("fw_rule_1_action"),
        ),
        (
            "str_eq",
            "DataSet.0.Rule.0.Priority",
            variables.get("fw_rule_1_priority"),
        ),
    ],
    action="DescribeFirewall",
)
def describe_firewall_04(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region"), "FWId": variables.get("fw_id1")}

    try:
        resp = client.unet().describe_firewall(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=3,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="DescribeFirewall",
)
def describe_firewall_05(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region")}

    try:
        resp = client.unet().describe_firewall(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=3,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="GrantFirewall",
)
def grant_firewall_06(client: utest.Client, variables: dict):
    d = {
        "ResourceType": "UHost",
        "ResourceId": variables.get("uhost_id1"),
        "Region": variables.get("Region"),
        "FWId": variables.get("fw_id1"),
    }

    try:
        resp = client.unet().grant_firewall(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=3,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "ResourceSet.0.Name", variables.get("uhost_name_1")),
        ("str_eq", "ResourceSet.0.ResourceType", "uhost"),
        ("str_eq", "ResourceSet.0.ResourceID", variables.get("uhost_id1")),
        ("str_eq", "TotalCount", 1),
        ("str_eq", "ResourceSet.0.Tag", variables.get("tag")),
    ],
    action="DescribeFirewallResource",
)
def describe_firewall_resource_07(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region"), "FWId": variables.get("fw_id1")}

    try:
        resp = client.unet().describe_firewall_resource(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="UpdateFirewall",
)
def update_firewall_08(client: utest.Client, variables: dict):
    d = {
        "Rule": [variables.get("fw_rule_2")],
        "Region": variables.get("Region"),
        "FWId": variables.get("fw_id1"),
    }

    try:
        resp = client.unet().update_firewall(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="UpdateFirewallAttribute",
)
def update_firewall_attribute_09(client: utest.Client, variables: dict):
    d = {
        "Tag": variables.get("tag_2"),
        "Remark": variables.get("remark_2"),
        "Region": variables.get("Region"),
        "Name": funcs.concat(variables.get("fw_name_2"), variables.get("Zone")),
        "FWId": variables.get("fw_id1"),
    }

    try:
        resp = client.unet().update_firewall_attribute(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=3,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "DataSet.0.FWId", variables.get("fw_id1")),
        (
            "str_eq",
            "DataSet.0.Name",
            funcs.concat(variables.get("fw_name_2"), variables.get("Zone")),
        ),
        ("str_eq", "DataSet.0.Tag", variables.get("tag_2")),
        ("str_eq", "DataSet.0.Remark", variables.get("remark_2")),
        ("str_eq", "DataSet.0.ResourceCount", 1),
        ("str_eq", "DataSet.0.Type", "user defined"),
        (
            "str_eq",
            "DataSet.0.Rule.0.ProtocolType",
            variables.get("fw_rule_2_protocol"),
        ),
        ("str_eq", "DataSet.0.Rule.0.DstPort", variables.get("fw_rule_2_port")),
        ("str_eq", "DataSet.0.Rule.0.SrcIP", variables.get("fw_rule_2_srcip")),
        (
            "str_eq",
            "DataSet.0.Rule.0.RuleAction",
            variables.get("fw_rule_2_action"),
        ),
        (
            "str_eq",
            "DataSet.0.Rule.0.Priority",
            variables.get("fw_rule_2_priority"),
        ),
    ],
    action="DescribeFirewall",
)
def describe_firewall_10(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region"), "FWId": variables.get("fw_id1")}

    try:
        resp = client.unet().describe_firewall(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    action="DescribeFirewall",
)
def describe_firewall_11(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region"), "Offset": 0, "Limit": 20}

    try:
        resp = client.unet().describe_firewall(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["fw_dataset"] = utest.value_at_path(resp, "DataSet")
    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="GrantFirewall",
)
def grant_firewall_12(client: utest.Client, variables: dict):
    d = {
        "ResourceType": "UHost",
        "ResourceId": variables.get("uhost_id1"),
        "Region": variables.get("Region"),
        "FWId": funcs.search_value(
            variables.get("fw_dataset"),
            "Type",
            variables.get("recommend_web"),
            "FWId",
        ),
    }

    try:
        resp = client.unet().grant_firewall(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=60,
    startup_delay=30,
    fast_fail=False,
    action="PoweroffUHostInstance",
)
def poweroff_uhost_instance_13(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "UHostId": variables.get("uhost_id1"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.uhost().poweroff_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=10,
    startup_delay=90,
    fast_fail=False,
    action="TerminateUHostInstance",
)
def terminate_uhost_instance_14(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "UHostId": variables.get("uhost_id1"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.uhost().terminate_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=60,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "DataSet.0.ResourceCount", 0),
    ],
    action="DescribeFirewall",
)
def describe_firewall_15(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region"), "FWId": variables.get("fw_id1")}

    try:
        resp = client.unet().describe_firewall(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=10,
    retry_interval=1,
    startup_delay=30,
    fast_fail=True,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="DeleteFirewall",
)
def delete_firewall_16(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region"), "FWId": variables.get("fw_id1")}

    try:
        resp = client.unet().delete_firewall(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("object_not_contains", "DataSet", variables.get("fw_id1")),
    ],
    action="DescribeFirewall",
)
def describe_firewall_17(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region"), "Offset": 0, "Limit": 10}

    try:
        resp = client.unet().describe_firewall(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp
