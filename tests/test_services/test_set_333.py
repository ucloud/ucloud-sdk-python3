""" Code is generated by ucloud-model, DO NOT EDIT IT. """

import pytest
import logging

from ucloud.core import exc
from ucloud.testing import env, funcs, op, utest

logger = logging.getLogger(__name__)


scenario = utest.Scenario(255)


@pytest.mark.skipif(env.is_ut(), reason=env.get_skip_reason())
def test_set_333(client: utest.Client, variables: dict):
    scenario.initial(variables)

    scenario.variables["Password"] = "Z3VhbmxpeXVhbm1pbWExMjMhQCM="
    scenario.variables["ImageName"] = "ImageTest"
    scenario.variables["TargetImageName"] = "ImageCopyTest"
    scenario.variables["TargetRegion"] = "cn-sh2"
    scenario.variables["TargetZone"] = "cn-sh2-01"
    scenario.variables["myImage"] = "#{u_get_image_resource($Region,$Zone)}"

    scenario.run(client)


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeImageResponse"),
    ],
    action="DescribeImage",
)
def describe_image_00(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "OsType": "Linux",
        "ImageType": "Base",
    }

    try:
        resp = client.uhost().describe_image(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["myImage"] = utest.value_at_path(resp, "ImageSet.0.ImageId")
    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=True,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="CreateUHostInstance",
)
def create_uhost_instance_01(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "Password": "VXFhNzg5VGVzdCFAIyQ7LA==",
        "Memory": 1024,
        "LoginMode": "Password",
        "ImageId": variables.get("myImage"),
        "DiskSpace": 0,
        "CPU": 1,
    }

    try:
        resp = client.uhost().create_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["hostId"] = utest.value_at_path(resp, "UHostIds.0")
    return resp


@scenario.step(
    max_retries=60,
    retry_interval=60,
    startup_delay=400,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeUHostInstanceResponse"),
        ("str_eq", "UHostSet.0.State", "Running"),
        ("str_eq", "UHostSet.0.BootDiskState", "Normal"),
    ],
    action="DescribeUHostInstance",
)
def describe_uhost_instance_02(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "UHostIds": [variables.get("hostId")],
        "Region": variables.get("Region"),
    }

    try:
        resp = client.uhost().describe_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=30,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "StopUHostInstanceResponse"),
    ],
    action="StopUHostInstance",
)
def stop_uhost_instance_03(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "UHostId": variables.get("hostId"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.uhost().stop_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=30,
    retry_interval=30,
    startup_delay=30,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeUHostInstanceResponse"),
        ("str_eq", "UHostSet.0.State", "Stopped"),
        ("str_eq", "UHostSet.0.BootDiskState", "Normal"),
    ],
    action="DescribeUHostInstance",
)
def describe_uhost_instance_04(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "UHostIds": [variables.get("hostId")],
        "Region": variables.get("Region"),
    }

    try:
        resp = client.uhost().describe_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=10,
    fast_fail=True,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="CreateCustomImage",
)
def create_custom_image_05(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "UHostId": variables.get("hostId"),
        "Region": variables.get("Region"),
        "ImageName": variables.get("ImageName"),
    }

    try:
        resp = client.uhost().create_custom_image(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["newImageId"] = utest.value_at_path(resp, "ImageId")
    return resp


@scenario.step(
    max_retries=100,
    retry_interval=30,
    startup_delay=60,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeImageResponse"),
        ("str_eq", "ImageSet.0.State", "Available"),
        ("str_eq", "ImageSet.0.ImageId", variables.get("newImageId")),
    ],
    action="DescribeImage",
)
def describe_image_06(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "ImageId": variables.get("newImageId"),
    }

    try:
        resp = client.uhost().describe_image(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=True,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="CreateUHostInstance",
)
def create_uhost_instance_07(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "Password": "VXFhNzg5VGVzdCFAIyQ7LA==",
        "Memory": 1024,
        "LoginMode": "Password",
        "ImageId": variables.get("newImageId"),
        "DiskSpace": 0,
        "CPU": 1,
    }

    try:
        resp = client.uhost().create_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["hostId2"] = utest.value_at_path(resp, "UHostIds.0")
    return resp


@scenario.step(
    max_retries=100,
    retry_interval=30,
    startup_delay=60,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeUHostInstanceResponse"),
        ("str_eq", "UHostSet.0.State", "Running"),
        ("str_eq", "UHostSet.0.BootDiskState", "Normal"),
    ],
    action="DescribeUHostInstance",
)
def describe_uhost_instance_08(client: utest.Client, variables: dict):
    d = {
        "UHostIds": [variables.get("hostId2")],
        "Region": variables.get("Region"),
    }

    try:
        resp = client.uhost().describe_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "GetProjectListResponse"),
    ],
    action="GetProjectList",
)
def get_project_list_09(client: utest.Client, variables: dict):
    d = {}

    try:
        resp = client.uaccount().get_project_list(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["TargetProjectID"] = utest.value_at_path(
        resp, "ProjectSet.0.ProjectId"
    )
    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=10,
    fast_fail=True,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="CopyCustomImage",
)
def copy_custom_image_10(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "TargetRegion": variables.get("TargetRegion"),
        "TargetProjectId": variables.get("TargetProjectID"),
        "TargetImageName": variables.get("TargetImageName"),
        "SourceImageId": variables.get("newImageId"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.uhost().copy_custom_image(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["cpImageId"] = utest.value_at_path(resp, "TargetImageId")
    return resp


@scenario.step(
    max_retries=60,
    retry_interval=30,
    startup_delay=60,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("float_eq", "ProgressInfo", 100),
    ],
    action="GetImageCopyProgress",
)
def get_image_copy_progress_11(client: utest.Client, variables: dict):
    d = {
        "Region": variables.get("TargetRegion"),
        "ProjectId": variables.get("TargetProjectID"),
        "ImageId": variables.get("cpImageId"),
    }

    try:
        resp = client.invoke("GetImageCopyProgress", d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=30,
    retry_interval=30,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeImageResponse"),
        ("str_eq", "ImageSet.0.State", "Available"),
    ],
    action="DescribeImage",
)
def describe_image_12(client: utest.Client, variables: dict):
    d = {
        "Region": variables.get("TargetRegion"),
        "ProjectId": variables.get("TargetProjectID"),
        "ImageId": variables.get("cpImageId"),
    }

    try:
        resp = client.uhost().describe_image(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="CreateUHostInstance",
)
def create_uhost_instance_13(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("TargetZone"),
        "Region": variables.get("TargetRegion"),
        "ProjectId": variables.get("TargetProjectID"),
        "Password": "VXFhNzg5VGVzdCFAIyQ7LA==",
        "Memory": 1024,
        "LoginMode": "Password",
        "ImageId": variables.get("cpImageId"),
        "DiskSpace": 0,
        "CPU": 1,
    }

    try:
        resp = client.uhost().create_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["hostId_new"] = utest.value_at_path(resp, "UHostIds.0")
    return resp


@scenario.step(
    max_retries=60,
    retry_interval=60,
    startup_delay=10,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeUHostInstanceResponse"),
        ("str_eq", "UHostSet.0.State", "Running"),
        ("str_eq", "UHostSet.0.BootDiskState", "Normal"),
    ],
    action="DescribeUHostInstance",
)
def describe_uhost_instance_14(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("TargetZone"),
        "UHostIds": [variables.get("hostId_new")],
        "Region": variables.get("TargetRegion"),
        "ProjectId": variables.get("TargetProjectID"),
    }

    try:
        resp = client.uhost().describe_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=True,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="TerminateCustomImage",
)
def terminate_custom_image_15(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "ImageId": variables.get("newImageId"),
    }

    try:
        resp = client.uhost().terminate_custom_image(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="StopUHostInstance",
)
def stop_uhost_instance_16(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "UHostId": variables.get("hostId"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.uhost().stop_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="StopUHostInstance",
)
def stop_uhost_instance_17(client: utest.Client, variables: dict):
    d = {"UHostId": variables.get("hostId2"), "Region": variables.get("Region")}

    try:
        resp = client.uhost().stop_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=30,
    retry_interval=10,
    startup_delay=10,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeUHostInstanceResponse"),
        ("str_eq", "UHostSet.0.State", "Stopped"),
        ("str_eq", "UHostSet.1.State", "Stopped"),
    ],
    action="DescribeUHostInstance",
)
def describe_uhost_instance_18(client: utest.Client, variables: dict):
    d = {
        "UHostIds": [variables.get("hostId")],
        "Region": variables.get("Region"),
    }

    try:
        resp = client.uhost().describe_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=5,
    fast_fail=True,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="TerminateUHostInstance",
)
def terminate_uhost_instance_19(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "UHostId": variables.get("hostId"),
        "Region": variables.get("Region"),
    }

    try:
        resp = client.uhost().terminate_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=True,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="TerminateUHostInstance",
)
def terminate_uhost_instance_20(client: utest.Client, variables: dict):
    d = {"UHostId": variables.get("hostId2"), "Region": variables.get("Region")}

    try:
        resp = client.uhost().terminate_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=100,
    fast_fail=True,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="TerminateCustomImage",
)
def terminate_custom_image_21(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("TargetZone"),
        "Region": variables.get("TargetRegion"),
        "ProjectId": variables.get("TargetProjectID"),
        "ImageId": variables.get("cpImageId"),
    }

    try:
        resp = client.uhost().terminate_custom_image(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=0,
    retry_interval=0,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="StopUHostInstance",
)
def stop_uhost_instance_22(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("TargetZone"),
        "UHostId": variables.get("hostId_new"),
        "Region": variables.get("TargetRegion"),
        "ProjectId": variables.get("TargetProjectID"),
    }

    try:
        resp = client.uhost().stop_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=30,
    retry_interval=10,
    startup_delay=10,
    fast_fail=True,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeUHostInstanceResponse"),
        ("str_eq", "UHostSet.0.State", "Stopped"),
    ],
    action="DescribeUHostInstance",
)
def describe_uhost_instance_23(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("TargetZone"),
        "UHostIds": [variables.get("hostId_new")],
        "Region": variables.get("TargetRegion"),
        "ProjectId": variables.get("TargetProjectID"),
    }

    try:
        resp = client.uhost().describe_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=10,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="TerminateUHostInstance",
)
def terminate_uhost_instance_24(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("TargetZone"),
        "UHostId": variables.get("hostId_new"),
        "Region": variables.get("TargetRegion"),
        "ProjectId": variables.get("TargetProjectID"),
    }

    try:
        resp = client.uhost().terminate_uhost_instance(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp
