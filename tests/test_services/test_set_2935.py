""" Code is generated by ucloud-model, DO NOT EDIT IT. """

import pytest
import logging

from ucloud.core import exc
from ucloud.testing import env, funcs, op, utest

logger = logging.getLogger(__name__)


scenario = utest.Scenario(2935)


@pytest.mark.skipif(env.is_ut(), reason=env.get_skip_reason())
def test_set_2935(client: utest.Client, variables: dict):
    scenario.initial(variables)

    scenario.variables[
        "Image_Id_ucloud"
    ] = "#{u_get_image_resource($Region,$Zone)}"
    scenario.variables["saopaulo_image"] = "uimage-1bkjka"

    scenario.run(client)


@scenario.step(
    max_retries=3,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "Action", "DescribeImageResponse"),
    ],
    action="DescribeImage",
)
def describe_image_00(client: utest.Client, variables: dict):
    d = {
        "Zone": variables.get("Zone"),
        "Region": variables.get("Region"),
        "OsType": "Linux",
        "ImageType": "Base",
    }

    try:
        resp = client.uhost().describe_image(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["Image_Id_ucloud"] = utest.value_at_path(
        resp, "ImageSet.0.ImageId"
    )
    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="CreateULB",
)
def create_ulb_01(client: utest.Client, variables: dict):
    d = {
        "ULBName": "测试",
        "Tag": "Default",
        "Region": variables.get("Region"),
        "InnerMode": "No",
    }

    try:
        resp = client.ulb().create_ulb(d)
    except exc.RetCodeException as e:
        resp = e.json()

    variables["ULBId"] = utest.value_at_path(resp, "ULBId")
    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=5,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("len_ge", "DataSet", 1),
    ],
    action="DescribeULBSimple",
)
def describe_ulb_simple_02(client: utest.Client, variables: dict):
    d = {"Region": variables.get("Region")}

    try:
        resp = client.invoke("DescribeULBSimple", d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=10,
    retry_interval=1,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("len_eq", "DataSet", 1),
    ],
    action="DescribeULBSimple",
)
def describe_ulb_simple_03(client: utest.Client, variables: dict):
    d = {"ULBId": variables.get("ULBId"), "Region": variables.get("Region")}

    try:
        resp = client.invoke("DescribeULBSimple", d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=3,
    fast_fail=False,
    validators=lambda variables: [
        ("str_eq", "RetCode", 0),
        ("str_eq", "DataSet.0.ULBId", variables.get("ULBId")),
    ],
    action="DescribeULB",
)
def describe_ulb_04(client: utest.Client, variables: dict):
    d = {
        "ULBId": variables.get("ULBId"),
        "Region": variables.get("Region"),
        "Offset": 0,
        "Limit": 60,
    }

    try:
        resp = client.ulb().describe_ulb(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp


@scenario.step(
    max_retries=10,
    retry_interval=10,
    startup_delay=0,
    fast_fail=False,
    validators=lambda variables: [("str_eq", "RetCode", 0)],
    action="DeleteULB",
)
def delete_ulb_05(client: utest.Client, variables: dict):
    d = {"ULBId": variables.get("ULBId"), "Region": variables.get("Region")}

    try:
        resp = client.ulb().delete_ulb(d)
    except exc.RetCodeException as e:
        resp = e.json()

    return resp
