""" Code is generated by ucloud-model, DO NOT EDIT IT. """

import pytest
import logging

from ucloud.core import exc
from ucloud.testing import env, funcs, op, utest

logger = logging.getLogger(__name__)


@pytest.mark.skipif(env.is_ut(), reason=env.get_skip_reason())
def test_set_230(client, variables):

    variables["sbw_name"] = "sbw_api_auto"
    variables["sbw_chargetype"] = "Month"
    variables["sbw_bw"] = "20"
    variables["resize_bw"] = "22"
    variables["Region"] = "cn-bj2"
    variables["eip_operatorname"] = "Bgp"
    variables["eip_bw"] = "2"

    allocate_share_bandwidth_00(client, variables)
    allocate_eip_01(client, variables)
    associate_eip_with_share_bandwidth_02(client, variables)
    describe_share_bandwidth_price_03(client, variables)
    describe_share_bandwidth_04(client, variables)
    resize_share_bandwidth_05(client, variables)
    describe_share_bandwidth_06(client, variables)
    describe_eip_07(client, variables)
    disassociate_eip_with_share_bandwidth_08(client, variables)
    describe_eip_09(client, variables)
    get_bandwidth_sum_10(client, variables)
    release_eip_11(client, variables)
    release_share_bandwidth_12(client, variables)


@utest.case(max_retries=10, retry_interval=10, startup_delay=0, fast_fail=False)
def allocate_share_bandwidth_00(client, variables):
    d = {
        "Region": variables.get("Region"),
        "Name": variables.get("sbw_name"),
        "ChargeType": variables.get("sbw_chargetype"),
        "ShareBandwidth": variables.get("sbw_bw"),
    }

    try:
        resp = client.unet().allocate_share_bandwidth(d)
    except exc.RetCodeException as e:
        resp = e.json()

    validators = [("str_eq", "RetCode", 0)]
    utest.validate(resp, validators)

    variables["sbw_id"] = utest.value_at_path(resp, "ShareBandwidthId")


@utest.case(max_retries=10, retry_interval=10, startup_delay=0, fast_fail=False)
def allocate_eip_01(client, variables):
    d = {
        "Region": variables.get("Region"),
        "OperatorName": variables.get("eip_operatorname"),
        "Bandwidth": variables.get("eip_bw"),
        "ChargeType": "Month",
        "PayMode": "Traffic",
        "Name": "eip_auto",
    }

    try:
        resp = client.unet().allocate_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    validators = [("str_eq", "RetCode", 0)]
    utest.validate(resp, validators)

    variables["eip_id"] = utest.value_at_path(resp, "EIPSet.0.EIPId")


@utest.case(max_retries=10, retry_interval=10, startup_delay=30, fast_fail=False)
def associate_eip_with_share_bandwidth_02(client, variables):
    d = {
        "Region": variables.get("Region"),
        "EIPIds": variables.get("eip_id"),
        "ShareBandwidthId": variables.get("sbw_id"),
    }

    try:
        resp = client.unet().associate_eip_with_share_bandwidth(d)
    except exc.RetCodeException as e:
        resp = e.json()

    validators = [("str_eq", "RetCode", 0)]
    utest.validate(resp, validators)


@utest.case(max_retries=10, retry_interval=10, startup_delay=0, fast_fail=False)
def describe_share_bandwidth_price_03(client, variables):
    d = {
        "ChargeType": variables.get("sbw_chargetype"),
        "ShareBandwidth": variables.get("sbw_bw"),
        "Quantity": 1,
        "Region": variables.get("Region"),
    }

    try:
        resp = client.invoke("DescribeShareBandwidthPrice", d)
    except exc.RetCodeException as e:
        resp = e.json()

    validators = [("str_eq", "RetCode", 0), ("gt", "TotalPrice", 0)]
    utest.validate(resp, validators)


@utest.case(max_retries=10, retry_interval=10, startup_delay=0, fast_fail=False)
def describe_share_bandwidth_04(client, variables):
    d = {
        "Region": variables.get("Region"),
        "ShareBandwidthIds": variables.get("sbw_id"),
    }

    try:
        resp = client.unet().describe_share_bandwidth(d)
    except exc.RetCodeException as e:
        resp = e.json()

    validators = [
        ("str_eq", "RetCode", 0),
        ("str_eq", "DataSet.0.ShareBandwidthId", variables.get("sbw_id")),
        ("str_eq", "DataSet.0.ShareBandwidth", variables.get("sbw_bw")),
        ("str_eq", "DataSet.0.ChargeType", variables.get("sbw_chargetype")),
        ("str_eq", "DataSet.0.Name", variables.get("sbw_name")),
        ("str_eq", "TotalCount", 1),
        ("str_eq", "DataSet.0.EIPSet.0.EIPId", variables.get("eip_id")),
    ]
    utest.validate(resp, validators)


@utest.case(max_retries=10, retry_interval=10, startup_delay=0, fast_fail=False)
def resize_share_bandwidth_05(client, variables):
    d = {
        "Region": variables.get("Region"),
        "ShareBandwidth": variables.get("resize_bw"),
        "ShareBandwidthId": variables.get("sbw_id"),
    }

    try:
        resp = client.unet().resize_share_bandwidth(d)
    except exc.RetCodeException as e:
        resp = e.json()

    validators = [("str_eq", "RetCode", 0)]
    utest.validate(resp, validators)


@utest.case(max_retries=10, retry_interval=10, startup_delay=0, fast_fail=False)
def describe_share_bandwidth_06(client, variables):
    d = {
        "Region": variables.get("Region"),
        "ShareBandwidthIds": variables.get("sbw_id"),
    }

    try:
        resp = client.unet().describe_share_bandwidth(d)
    except exc.RetCodeException as e:
        resp = e.json()

    validators = [
        ("str_eq", "RetCode", 0),
        ("str_eq", "DataSet.0.ShareBandwidth", variables.get("resize_bw")),
    ]
    utest.validate(resp, validators)


@utest.case(max_retries=3, retry_interval=1, startup_delay=0, fast_fail=False)
def describe_eip_07(client, variables):
    d = {
        "Region": variables.get("Region"),
        "EIPIds": variables.get("eip_id"),
        "Offset": 0,
        "Limit": 100,
    }

    try:
        resp = client.unet().describe_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    validators = [
        ("str_eq", "RetCode", 0),
        ("str_eq", "EIPSet.0.BandwidthType", 1),
        ("str_eq", "EIPSet.0.PayMode", "ShareBandwidth"),
    ]
    utest.validate(resp, validators)


@utest.case(max_retries=10, retry_interval=10, startup_delay=5, fast_fail=False)
def disassociate_eip_with_share_bandwidth_08(client, variables):
    d = {
        "Region": variables.get("Region"),
        "EIPIds": variables.get("eip_id"),
        "ShareBandwidthId": variables.get("sbw_id"),
        "Bandwidth": variables.get("eip_bw"),
    }

    try:
        resp = client.unet().disassociate_eip_with_share_bandwidth(d)
    except exc.RetCodeException as e:
        resp = e.json()

    validators = [("str_eq", "RetCode", 0)]
    utest.validate(resp, validators)


@utest.case(max_retries=3, retry_interval=10, startup_delay=10, fast_fail=False)
def describe_eip_09(client, variables):
    d = {
        "Region": variables.get("Region"),
        "EIPIds": variables.get("eip_id"),
        "Offset": 0,
        "Limit": 100,
    }

    try:
        resp = client.unet().describe_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()

    validators = [
        ("str_eq", "RetCode", 0),
        ("str_eq", "EIPSet.0.BandwidthType", 0),
        ("str_eq", "EIPSet.0.PayMode", "Bandwidth"),
    ]
    utest.validate(resp, validators)


@utest.case(max_retries=3, retry_interval=1, startup_delay=0, fast_fail=False)
def get_bandwidth_sum_10(client, variables):
    d = {"Region": variables.get("Region")}

    try:
        resp = client.invoke("GetBandwidthSum", d)
    except exc.RetCodeException as e:
        resp = e.json()

    validators = [
        ("str_eq", "RetCode", 0),
        ("gt", "Info.BwOutSum", 0),
        ("gt", "Info.BwOutShareSum", 0),
        ("gt", "Info.BwOutAll", 0),
    ]
    utest.validate(resp, validators)


@utest.case(max_retries=10, retry_interval=10, startup_delay=0, fast_fail=False)
def release_eip_11(client, variables):
    d = {"Region": variables.get("Region"), "EIPId": variables.get("eip_id")}

    try:
        resp = client.unet().release_eip(d)
    except exc.RetCodeException as e:
        resp = e.json()


@utest.case(max_retries=10, retry_interval=10, startup_delay=3, fast_fail=False)
def release_share_bandwidth_12(client, variables):
    d = {
        "Region": variables.get("Region"),
        "ShareBandwidthId": variables.get("sbw_id"),
        "EIPBandwidth": 2,
    }

    try:
        resp = client.unet().release_share_bandwidth(d)
    except exc.RetCodeException as e:
        resp = e.json()

    validators = [("str_eq", "RetCode", 0)]
    utest.validate(resp, validators)
